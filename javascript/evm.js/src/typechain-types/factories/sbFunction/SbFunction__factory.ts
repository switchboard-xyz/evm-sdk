/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SbFunction,
  SbFunctionInterface,
} from "../../sbFunction/SbFunction";

const _abi = [
  {
    inputs: [],
    name: "AlreadyExecuted",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "GasLimitExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "QuoteDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "TransactionExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountAddress",
        type: "address",
      },
    ],
    name: "FunctionAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "FunctionCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FunctionFund",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "string",
        name: "containerRegistry",
        type: "string",
      },
      {
        internalType: "string",
        name: "container",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "version",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "schedule",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "permittedCallers",
        type: "address[]",
      },
    ],
    name: "createFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
      {
        internalType: "bytes[]",
        name: "signatures",
        type: "bytes[]",
      },
    ],
    name: "forward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "funcs",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteId",
            type: "address",
          },
          {
            internalType: "string",
            name: "containerRegistry",
            type: "string",
          },
          {
            internalType: "string",
            name: "container",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "version",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastExecutionTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextAllowedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "schedule",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "permittedCallers",
            type: "address[]",
          },
        ],
        internalType: "struct FunctionLib.SbFunction",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "functionEscrowFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "functionEscrowWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "functionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllFunctions",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteId",
            type: "address",
          },
          {
            internalType: "string",
            name: "containerRegistry",
            type: "string",
          },
          {
            internalType: "string",
            name: "container",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "version",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastExecutionTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextAllowedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "schedule",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "permittedCallers",
            type: "address[]",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getFunctionsByAuthority",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteId",
            type: "address",
          },
          {
            internalType: "string",
            name: "containerRegistry",
            type: "string",
          },
          {
            internalType: "string",
            name: "container",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "version",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastExecutionTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextAllowedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "schedule",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "permittedCallers",
            type: "address[]",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "quoteIdx",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "delegatedSignerId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "observedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nextAllowedTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isFailure",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
    ],
    name: "verifyFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50613504806100206000396000f3fe60806040526004361061009c5760003560e01c80639c23da50116100645780639c23da5014610178578063a13001c914610198578063a29baf1e146101b8578063ab6418b4146101d8578063ba93166c146101ed578063f0b48c6f1461020057600080fd5b8063357f633f146100a1578063572b6c05146100d85780637096052c146101095780638ef920031461012b57806393e879ba14610158575b600080fd5b3480156100ad57600080fd5b506100c16100bc3660046129bc565b610220565b6040516100cf929190612bcc565b60405180910390f35b3480156100e457600080fd5b506100f96100f33660046129bc565b50600190565b60405190151581526020016100cf565b34801561011557600080fd5b50610129610124366004612e7d565b610801565b005b34801561013757600080fd5b5061014b6101463660046129bc565b610a99565b6040516100cf9190612f51565b34801561016457600080fd5b50610129610173366004612fc8565b610ab0565b34801561018457600080fd5b506101296101933660046130c4565b610bbe565b3480156101a457600080fd5b506100f96101b33660046129bc565b610c68565b3480156101c457600080fd5b506101296101d3366004613113565b610c73565b3480156101e457600080fd5b506100c1610dc9565b6101296101fb3660046129bc565b6112e4565b34801561020c57600080fd5b5061012961021b366004613162565b6113fd565b6060806000805160206134af8339815191526000805b60018301548110156102ba57856001600160a01b0316836000016000856001018481548110610267576102676131ed565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190206001015416036102a857816102a481613219565b9250505b806102b281613219565b915050610236565b506000816001600160401b038111156102d5576102d5612c6d565b6040519080825280602002602001820160405280156102fe578160200160208202803683370190505b5090506000826001600160401b0381111561031b5761031b612c6d565b60405190808252806020026020018201604052801561035457816020015b610341612885565b8152602001906001900390816103395790505b50905060005b60018501548110156107f457876001600160a01b031685600001600087600101848154811061038b5761038b6131ed565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190206001015416036107e2578460000160008660010183815481106103d9576103d96131ed565b60009182526020808320909101546001600160a01b03168352820192909252604090810190912081516101c0810190925280548290829061041990613232565b80601f016020809104026020016040519081016040528092919081815260200182805461044590613232565b80156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820180546060909201916104cf90613232565b80601f01602080910402602001604051908101604052809291908181526020018280546104fb90613232565b80156105485780601f1061051d57610100808354040283529160200191610548565b820191906000526020600020905b81548152906001019060200180831161052b57829003601f168201915b5050505050815260200160048201805461056190613232565b80601f016020809104026020016040519081016040528092919081815260200182805461058d90613232565b80156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b031660408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c09092019161063290613232565b80601f016020809104026020016040519081016040528092919081815260200182805461065e90613232565b80156106ab5780601f10610680576101008083540402835291602001916106ab565b820191906000526020600020905b81548152906001019060200180831161068e57829003601f168201915b5050509183525050600b8201546020820152600c82015460409091019060ff1660058111156106dc576106dc612a29565b60058111156106ed576106ed612a29565b8152602001600d820180548060200260200160405190810160405280929190818152602001828054801561074a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161072c575b505050505081525050828561075e9061326c565b95508581518110610771576107716131ed565b6020026020010181905250846001018181548110610791576107916131ed565b9060005260206000200160009054906101000a90046001600160a01b03168385815181106107c1576107c16131ed565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806107ec81613219565b91505061035a565b5090969095509350505050565b610101600061081c60008051602061348f8339815191525490565b90508060000361083c5761083c8260008051602061348f83398151915255565b81810361085c5760405163887efaa560e01b815260040160405180910390fd5b801580159061087a575060008051602061348f833981519152548216155b156108985760405163887efaa560e01b815260040160405180910390fd5b60005b8451811015610a7c5760008582815181106108b8576108b86131ed565b6020026020010151905060006108cd82611c73565b60008181527f600fcc152361d3982abba1c7da63e8ed79c28272e1cb6960e42211209375d5b4602052604090205490915060ff161561091f57604051630dc1019760e01b815260040160405180910390fd5b61092881611e1c565b6000610952836080015183898781518110610945576109456131ed565b6020026020010151611e56565b90508061097257604051638baa579f60e01b815260040160405180910390fd5b8251421015610994576040516338e5e54b60e21b815260040160405180910390fd5b60008084606001516001600160a01b031685604001518660a0015187608001516040516020016109c5929190613283565b60408051601f19818403018152908290526109df916132b5565b60006040518083038185875af1925050503d8060008114610a1c576040519150601f19603f3d011682016040523d82523d6000602084013e610a21565b606091505b5091509150610a638560600151838360405180604001604052806015815260200174119bdc9dd85c99195c8810d85b1b0811985a5b1959605a1b815250611f26565b5050505050508080610a7490613219565b91505061089b565b50610a938160008051602061348f83398151915255565b50505050565b610aa1612885565b610aaa82611faf565b92915050565b6000610aba612338565b9050610ac5816123b3565b15610ae35760405163a023275d60e01b815260040160405180910390fd5b6000610aed612338565b60405163b781a3fb60e01b81526001600160a01b03808316600483015260006024830152808b1660448301528b166064820152909150309063b781a3fb90608401600060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b50505050610b72828b8b848b8b8b8f8c8c6123e3565b816001600160a01b0316896001600160a01b03167ff91c401ec9e7a7f7987a949ca22fe503608aed50c54cb3d2b64039d8a4b60d4260405160405180910390a350505050505050505050565b6000610bc983611faf565b90506000610bd56124bc565b90506000826101a0015151118015610bf95750610bf7826101a00151826124e9565b155b15610c1757604051636f6a1b8760e11b815260040160405180910390fd5b806001600160a01b0316846001600160a01b03167fa693cc36df1fe40153070ce1d1fa0a24afef2f6d99d8b3c3aa1b08bc446021cd85604051610c5a91906132d1565b60405180910390a350505050565b6000610aaa826123b3565b60016000610c8d60008051602061348f8339815191525490565b905080600003610cad57610cad8260008051602061348f83398151915255565b818103610ccd5760405163887efaa560e01b815260040160405180910390fd5b8015801590610ceb575060008051602061348f833981519152548216155b15610d095760405163887efaa560e01b815260040160405180910390fd5b6000610d1485611faf565b60208101519091506001600160a01b03163314610d4457604051636f6a1b8760e11b815260040160405180910390fd5b838161016001511015610d6a5760405163a9cb9e0d60e01b815260040160405180910390fd5b610d74858561254e565b6040516001600160a01b0387169085156108fc029086906000818181858888f19350505050158015610daa573d6000803e3d6000fd5b5050610dc28160008051602061348f83398151915255565b5050505050565b7f72050865ba43dca306a7c9a249316457b134cf9751dcee5ef976e9d66668f8985460609081906000805160206134af833981519152906000816001600160401b03811115610e1a57610e1a612c6d565b604051908082528060200260200182016040528015610e43578160200160208202803683370190505b5090506000826001600160401b03811115610e6057610e60612c6d565b604051908082528060200260200182016040528015610e9957816020015b610e86612885565b815260200190600190039081610e7e5790505b50905060005b60018501548110156112d857846000016000866001018381548110610ec657610ec66131ed565b60009182526020808320909101546001600160a01b03168352820192909252604090810190912081516101c08101909252805482908290610f0690613232565b80601f0160208091040260200160405190810160405280929190818152602001828054610f3290613232565b8015610f7f5780601f10610f5457610100808354040283529160200191610f7f565b820191906000526020600020905b815481529060010190602001808311610f6257829003601f168201915b505050918352505060018201546001600160a01b0390811660208301526002830154166040820152600382018054606090920191610fbc90613232565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe890613232565b80156110355780601f1061100a57610100808354040283529160200191611035565b820191906000526020600020905b81548152906001019060200180831161101857829003601f168201915b5050505050815260200160048201805461104e90613232565b80601f016020809104026020016040519081016040528092919081815260200182805461107a90613232565b80156110c75780601f1061109c576101008083540402835291602001916110c7565b820191906000526020600020905b8154815290600101906020018083116110aa57829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b031660408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c09092019161111f90613232565b80601f016020809104026020016040519081016040528092919081815260200182805461114b90613232565b80156111985780601f1061116d57610100808354040283529160200191611198565b820191906000526020600020905b81548152906001019060200180831161117b57829003601f168201915b5050509183525050600b8201546020820152600c82015460409091019060ff1660058111156111c9576111c9612a29565b60058111156111da576111da612a29565b8152602001600d820180548060200260200160405190810160405280929190818152602001828054801561123757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611219575b505050505081525050828561124b9061326c565b9550858151811061125e5761125e6131ed565b602002602001018190525084600101818154811061127e5761127e6131ed565b9060005260206000200160009054906101000a90046001600160a01b03168385815181106112ae576112ae6131ed565b6001600160a01b0390921660209283029190910190910152806112d081613219565b915050610e9f565b50909590945092505050565b600160006112fe60008051602061348f8339815191525490565b90508060000361131e5761131e8260008051602061348f83398151915255565b81810361133e5760405163887efaa560e01b815260040160405180910390fd5b801580159061135c575060008051602061348f833981519152548216155b1561137a5760405163887efaa560e01b815260040160405180910390fd5b611383836123b3565b6113a057604051631535ac5f60e31b815260040160405180910390fd5b6113aa833461258f565b604051349033906001600160a01b038616907fcfa8ce8f8d66cce7f7052bcba7d1f853a503d00896bcd7dfdb3ff4b1ad1f222d90600090a46113f88160008051602061348f83398151915255565b505050565b610102600061141860008051602061348f8339815191525490565b905080600003611438576114388260008051602061348f83398151915255565b8181036114585760405163887efaa560e01b815260040160405180910390fd5b8015801590611476575060008051602061348f833981519152548216155b156114945760405163887efaa560e01b815260040160405180910390fd5b3360009081527f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff960205260408120546001600160a01b0316906114d68b611faf565b905060006114e78260c001516125c7565b604080516101c08101825282546001600160a01b0316815260018301805483516020828102820181019095528181529294938086019392919083018282801561155957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161153b575b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582018054806020026020016040519081016040528092919081815260200182805480156115cf57602002820191906000526020600020905b8154815260200190600101908083116115bb575b5050509183525050600682015460208201526007820154604082015260088201546060820152600982015460ff808216151560808401526101009182900416151560a0830152600a83015460c0830152600b83015460e0830152600c909201549101529050611677836001600160a01b0390811660009081527f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff8602052604090205416151590565b6116945760405163d483c43f60e01b815260040160405180910390fd5b826001600160a01b031681602001518e815181106116b4576116b46131ed565b60200260200101516001600160a01b0316146116e357604051636f6a1b8760e11b815260040160405180910390fd5b6040516278767760e81b81526001600160a01b03841660048201523090637876770090602401602060405180830381865afa158015611726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174a91906132e4565b6117675760405163a9cb9e0d60e01b815260040160405180910390fd5b61177083612609565b6002015460c08301516001600160a01b039081169116146117a45760405163a9cb9e0d60e01b815260040160405180910390fd5b87156117ed578061010001518260e0015110156117da576117d58c8360e0015160016117d09190613301565b612631565b6117f8565b6117e58c600261265e565b505050611c51565b6117f88c6000612631565b60006118078360400151612609565b90508781600701541461182d5760405163a9cb9e0d60e01b815260040160405180910390fd5b600061184161183c8d42613314565b6126ac565b905060148111156118655760405163a9cb9e0d60e01b815260040160405180910390fd5b826101400151156118ff576118d28460c001518f61188360016126c8565b6001600160a01b0392831660009081527fdc662b6192622eddc6e089aea0ceba83a6d6004cf0824f8f89d137cc0bb9622760209081526040808320949095168252929092529190205416151590565b6118ff57610180840160055b908160058111156118f1576118f1612a29565b815250505050505050611c51565b81546001600160a01b038e166001600160a01b031990911617825560048201805460ff191660021790556119364262093a80613301565b60068301554260058301556060830151610160850151101561195e57610180840160046118de565b4261010085015261012084018b9052600161018085015260005b8851811015611c4a576000898281518110611995576119956131ed565b6020026020010151905060003a82602001516119b1919061333b565b905060006119be83611c73565b60008181527f600fcc152361d3982abba1c7da63e8ed79c28272e1cb6960e42211209375d5b4602052604090205490915060ff1615611a1057604051630dc1019760e01b815260040160405180910390fd5b611a1981611e1c565b8251421015611a3b576040516338e5e54b60e21b815260040160405180910390fd5b60608701516040840151611a4f9084613301565b611a599190613301565b8861016001511015611a7e57604051631e9acf1760e31b815260040160405180910390fd5b60608701516040840151611a929084613301565b611a9c9190613301565b8861016001818151611aae9190613352565b90525060005a905060008085606001516001600160a01b031686604001518760a001518860800151604051602001611ae7929190613283565b60408051601f1981840301815290829052611b01916132b5565b60006040518083038185875af1925050503d8060008114611b3e576040519150601f19603f3d011682016040523d82523d6000602084013e611b43565b606091505b5091509150611b848660600151838360405180604001604052806014815260200173119d5b98dd1a5bdb8810d85b1b0811985a5b195960621b815250611f26565b5060005a611b929085613352565b90508660200151811115611bb957604051635f48bcd360e11b815260040160405180910390fd5b6000611bc53a8361333b565b611bcf9088613352565b9050808d61016001818151611be49190613301565b90525060608c015133906108fc90611bfc3a8661333b565b611c069190613301565b6040518115909202916000818181858888f19350505050158015611c2e573d6000803e3d6000fd5b5050505050505050508080611c4290613219565b915050611978565b5050505050505b611c678160008051602061348f83398151915255565b50505050505050505050565b600080611c7f836126e8565b905060003090506000604051602001611cfc907f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081527f76657273696f6e2c75696e7432353620636861696e49642c6164647265737320602082015271766572696679696e67436f6e74726163742960701b604082015260520190565b60408051601f1981840301815282825280516020918201208383018352601d84527f537769746368626f6172644174746573746174696f6e53657276696365000000938201939093528151808301835260058152640312e302e360dc1b908201528151808201939093527f20d4191b0256662a146277a13913ba74eb4fa314faa58b7b6f51681fd40eb642838301527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c6060808501919091524660808501529490941b6001600160601b03191660a08301528051808303609401815260b48301825280519085012061190160f01b60d484015260f48301526101148083019590955280518083039095018552610134909101905250815191012092915050565b60009081527f600fcc152361d3982abba1c7da63e8ed79c28272e1cb6960e42211209375d5b460205260409020805460ff19166001179055565b60008151604214611e6957506000611f1f565b600082600081518110611e7e57611e7e6131ed565b016020015160f81c90506000611e95846001612817565b90506000611ea4856021612817565b60408051600081526020810180835289905260ff86169181019190915260608101849052608081018290529091506001600160a01b0388169060019060a0016020604051602081039080840390855afa158015611f05573d6000803e3d6000fd5b505050602060405103516001600160a01b03161493505050505b9392505050565b60608315611f9d578251600003611f96576000856001600160a01b03163b11611f965760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081611fa7565b611fa7838361285b565b949350505050565b611fb7612885565b6001600160a01b03821660009081526000805160206134af83398151915260205260409081902081516101c08101909252805482908290611ff790613232565b80601f016020809104026020016040519081016040528092919081815260200182805461202390613232565b80156120705780601f1061204557610100808354040283529160200191612070565b820191906000526020600020905b81548152906001019060200180831161205357829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820180546060909201916120ad90613232565b80601f01602080910402602001604051908101604052809291908181526020018280546120d990613232565b80156121265780601f106120fb57610100808354040283529160200191612126565b820191906000526020600020905b81548152906001019060200180831161210957829003601f168201915b5050505050815260200160048201805461213f90613232565b80601f016020809104026020016040519081016040528092919081815260200182805461216b90613232565b80156121b85780601f1061218d576101008083540402835291602001916121b8565b820191906000526020600020905b81548152906001019060200180831161219b57829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b031660408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c09092019161221090613232565b80601f016020809104026020016040519081016040528092919081815260200182805461223c90613232565b80156122895780601f1061225e57610100808354040283529160200191612289565b820191906000526020600020905b81548152906001019060200180831161226c57829003601f168201915b5050509183525050600b8201546020820152600c82015460409091019060ff1660058111156122ba576122ba612a29565b60058111156122cb576122cb612a29565b8152602001600d820180548060200260200160405190810160405280929190818152602001828054801561232857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161230a575b5050505050815250509050919050565b6000807f20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b5805460009061236a90613219565b918290555061237a600143613352565b40604051602001612395929190918252602082015260400190565b60408051601f19818403018152919052805160209091012092915050565b6001600160a01b0390811660009081526000805160206134af833981519152602052604090206001015416151590565b6001600160a01b038a1660009081526000805160206134af83398151915260205260409020806124138b826133b3565b506001810180546001600160a01b03808c166001600160a01b031992831617909255600283018054928b16929091169190911790556003810161245688826133b3565b506004810161246587826133b3565b50600581018590556006810180546001600160a01b0319166001600160a01b038616179055600a810161249884826133b3565b5081516124ae90600d8301906020850190612923565b505050505050505050505050565b33601436108015906124d657506001600160a01b03811630145b156124e6575060131936013560601c5b90565b6000805b835181101561254457826001600160a01b0316848281518110612512576125126131ed565b60200260200101516001600160a01b031603612532576001915050610aaa565b8061253c81613219565b9150506124ed565b5060009392505050565b6001600160a01b03821660009081526000805160206134af83398151915260205260408120600b018054839290612586908490613352565b90915550505050565b6001600160a01b03821660009081526000805160206134af83398151915260205260408120600b018054839290612586908490613301565b60007f60afd68830977364a6093883acfe9f98da214c7c3590e74cf82ad9ef006ddc3e5b6001600160a01b039092166000908152602092909252506040902090565b60007f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff86125eb565b6001600160a01b039190911660009081526000805160206134af8339815191526020526040902060070155565b6001600160a01b03821660009081526000805160206134af83398151915260205260409020600c01805482919060ff191660018360058111156126a3576126a3612a29565b02179055505050565b6000808212156126c4576126bf82613472565b610aaa565b5090565b6000808260028111156126dd576126dd612a29565b6001901b9392505050565b600060405160200161277e907f5472616e73616374696f6e2875696e743235362065787069726174696f6e546981527f6d655365636f6e64732c75696e74323536206761734c696d69742c75696e743260208201527f35362076616c75652c6164647265737320746f2c616464726573732066726f6d60408201526b2c627974657320646174612960a01b6060820152606c0190565b60408051601f198184030181528282528051602091820120855186830151878501516060808a01516080808c015160a0808e01518051908b0120998c0198909852988a019590955281890193909352928701526001600160601b031990821b8116928601929092529290921b90911660b483015260c882015260e801604051602081830303815290604052805190602001209050919050565b6000612824826020613301565b835110156128455760405163a9cb9e0d60e01b815260040160405180910390fd5b612850602083613301565b929092015192915050565b81511561286b5781518083602001fd5b8060405162461bcd60e51b8152600401611f8d91906132d1565b604051806101c001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000801916815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160608152602001600081526020016000600581111561291657612916612a29565b8152602001606081525090565b828054828255906000526020600020908101928215612978579160200282015b8281111561297857825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612943565b506126c49291505b808211156126c45760008155600101612980565b6001600160a01b03811681146129a957600080fd5b50565b80356129b781612994565b919050565b6000602082840312156129ce57600080fd5b8135611f1f81612994565b60005b838110156129f45781810151838201526020016129dc565b50506000910152565b60008151808452612a158160208601602086016129d9565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60068110612a5d57634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015612a9a5781516001600160a01b031687529582019590820190600101612a75565b509495945050505050565b60006101c08251818552612abb828601826129fd565b9150506020830151612ad860208601826001600160a01b03169052565b506040830151612af360408601826001600160a01b03169052565b5060608301518482036060860152612b0b82826129fd565b91505060808301518482036080860152612b2582826129fd565b91505060a083015160a085015260c0830151612b4c60c08601826001600160a01b03169052565b5060e08381015190850152610100808401519085015261012080840151908501526101408084015185830382870152612b8583826129fd565b9250505061016080840151818601525061018080840151612ba882870182612a3f565b50506101a08084015185830382870152612bc28382612a61565b9695505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612c0e5781516001600160a01b031684529284019290840190600101612be9565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015612c5e57601f19868403018552612c4c838351612aa5565b94870194925090860190600101612c30565b50909998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715612ca557612ca5612c6d565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612cd357612cd3612c6d565b604052919050565b60006001600160401b03821115612cf457612cf4612c6d565b5060051b60200190565b600082601f830112612d0f57600080fd5b81356001600160401b03811115612d2857612d28612c6d565b612d3b601f8201601f1916602001612cab565b818152846020838601011115612d5057600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612d7e57600080fd5b81356020612d93612d8e83612cdb565b612cab565b82815260059290921b84018101918181019086841115612db257600080fd5b8286015b84811015612e725780356001600160401b0380821115612dd65760008081fd5b9088019060c0828b03601f1901811315612df05760008081fd5b612df8612c83565b87840135815260408085013589830152606080860135828401526080915081860135612e2381612994565b9083015260a085810135612e3681612994565b83830152928501359284841115612e4f57600091508182fd5b612e5d8e8b86890101612cfe565b90830152508652505050918301918301612db6565b509695505050505050565b60008060408385031215612e9057600080fd5b82356001600160401b0380821115612ea757600080fd5b612eb386838701612d6d565b9350602091508185013581811115612eca57600080fd5b8501601f81018713612edb57600080fd5b8035612ee9612d8e82612cdb565b81815260059190911b82018401908481019089831115612f0857600080fd5b8584015b83811015612f4057803586811115612f245760008081fd5b612f328c8983890101612cfe565b845250918601918601612f0c565b508096505050505050509250929050565b602081526000611f1f6020830184612aa5565b600082601f830112612f7557600080fd5b81356020612f85612d8e83612cdb565b82815260059290921b84018101918181019086841115612fa457600080fd5b8286015b84811015612e72578035612fbb81612994565b8352918301918301612fa8565b600080600080600080600080610100898b031215612fe557600080fd5b88356001600160401b0380821115612ffc57600080fd5b6130088c838d01612cfe565b995061301660208c016129ac565b985061302460408c016129ac565b975060608b013591508082111561303a57600080fd5b6130468c838d01612cfe565b965060808b013591508082111561305c57600080fd5b6130688c838d01612cfe565b955060a08b0135945060c08b013591508082111561308557600080fd5b6130918c838d01612cfe565b935060e08b01359150808211156130a757600080fd5b506130b48b828c01612f64565b9150509295985092959890939650565b600080604083850312156130d757600080fd5b82356130e281612994565b915060208301356001600160401b038111156130fd57600080fd5b61310985828601612cfe565b9150509250929050565b60008060006060848603121561312857600080fd5b833561313381612994565b9250602084013561314381612994565b929592945050506040919091013590565b80151581146129a957600080fd5b600080600080600080600080610100898b03121561317f57600080fd5b88359750602089013561319181612994565b965060408901356131a181612994565b9550606089013594506080890135935060a08901356131bf81613154565b925060c0890135915060e08901356001600160401b038111156131e157600080fd5b6130b48b828c01612d6d565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161322b5761322b613203565b5060010190565b600181811c9082168061324657607f821691505b60208210810361326657634e487b7160e01b600052602260045260246000fd5b50919050565b60008161327b5761327b613203565b506000190190565b600083516132958184602088016129d9565b60609390931b6001600160601b0319169190920190815260140192915050565b600082516132c78184602087016129d9565b9190910192915050565b602081526000611f1f60208301846129fd565b6000602082840312156132f657600080fd5b8151611f1f81613154565b80820180821115610aaa57610aaa613203565b818103600083128015838313168383128216171561333457613334613203565b5092915050565b8082028115828204841417610aaa57610aaa613203565b81810381811115610aaa57610aaa613203565b601f8211156113f857600081815260208120601f850160051c8101602086101561338c5750805b601f850160051c820191505b818110156133ab57828155600101613398565b505050505050565b81516001600160401b038111156133cc576133cc612c6d565b6133e0816133da8454613232565b84613365565b602080601f83116001811461341557600084156133fd5750858301515b600019600386901b1c1916600185901b1785556133ab565b600085815260208120601f198616915b8281101561344457888601518255948401946001909101908401613425565b50858210156134625787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600160ff1b820161348757613487613203565b506000039056fe20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b672050865ba43dca306a7c9a249316457b134cf9751dcee5ef976e9d66668f897a2646970667358221220fe558108b8c3b3214b278f99e88271309df0f2e144bd3c162cf385d67902c6ca64736f6c63430008110033";

type SbFunctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SbFunctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SbFunction__factory extends ContractFactory {
  constructor(...args: SbFunctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SbFunction> {
    return super.deploy(overrides || {}) as Promise<SbFunction>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SbFunction {
    return super.attach(address) as SbFunction;
  }
  override connect(signer: Signer): SbFunction__factory {
    return super.connect(signer) as SbFunction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SbFunctionInterface {
    return new utils.Interface(_abi) as SbFunctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SbFunction {
    return new Contract(address, _abi, signerOrProvider) as SbFunction;
  }
}
