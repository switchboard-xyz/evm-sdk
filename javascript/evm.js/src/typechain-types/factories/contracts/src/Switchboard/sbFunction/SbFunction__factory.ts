/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SbFunction,
  SbFunctionInterface,
} from "../../../../../contracts/src/Switchboard/sbFunction/SbFunction";

const _abi = [
  {
    inputs: [],
    name: "AlreadyExecuted",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "GasLimitExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "QuoteDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "TransactionExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountAddress",
        type: "address",
      },
    ],
    name: "FunctionAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "FunctionCall",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FunctionFund",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "string",
        name: "containerRegistry",
        type: "string",
      },
      {
        internalType: "string",
        name: "container",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "version",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "schedule",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "permittedCallers",
        type: "address[]",
      },
    ],
    name: "createFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
      {
        internalType: "bytes[]",
        name: "signatures",
        type: "bytes[]",
      },
    ],
    name: "forward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "funcs",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteId",
            type: "address",
          },
          {
            internalType: "string",
            name: "containerRegistry",
            type: "string",
          },
          {
            internalType: "string",
            name: "container",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "version",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastExecutionTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextAllowedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "schedule",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "permittedCallers",
            type: "address[]",
          },
        ],
        internalType: "struct FunctionLib.SbFunction",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "functionEscrowFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "functionEscrowWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "functionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllFunctions",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteId",
            type: "address",
          },
          {
            internalType: "string",
            name: "containerRegistry",
            type: "string",
          },
          {
            internalType: "string",
            name: "container",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "version",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastExecutionTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextAllowedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "schedule",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "permittedCallers",
            type: "address[]",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getFunctionsByAuthority",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "quoteId",
            type: "address",
          },
          {
            internalType: "string",
            name: "containerRegistry",
            type: "string",
          },
          {
            internalType: "string",
            name: "container",
            type: "string",
          },
          {
            internalType: "bytes32",
            name: "version",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastExecutionTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextAllowedTimestamp",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "schedule",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            internalType: "address[]",
            name: "permittedCallers",
            type: "address[]",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "quoteIdx",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "delegatedSignerId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "observedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nextAllowedTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isFailure",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
    ],
    name: "verifyFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061355d806100206000396000f3fe60806040526004361061009c5760003560e01c80639c23da50116100645780639c23da5014610178578063a13001c914610198578063a29baf1e146101b8578063ab6418b4146101d8578063ba93166c146101ed578063f0b48c6f1461020057600080fd5b8063357f633f146100a1578063572b6c05146100d85780637096052c146101095780638ef920031461012b57806393e879ba14610158575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004612a15565b610220565b6040516100cf929190612c25565b60405180910390f35b3480156100e457600080fd5b506100f96100f3366004612a15565b50600190565b60405190151581526020016100cf565b34801561011557600080fd5b50610129610124366004612ed6565b610801565b005b34801561013757600080fd5b5061014b610146366004612a15565b610a99565b6040516100cf9190612faa565b34801561016457600080fd5b50610129610173366004613021565b610ab0565b34801561018457600080fd5b5061012961019336600461311d565b610c17565b3480156101a457600080fd5b506100f96101b3366004612a15565b610cc1565b3480156101c457600080fd5b506101296101d336600461316c565b610ccc565b3480156101e457600080fd5b506100c1610e22565b6101296101fb366004612a15565b61133d565b34801561020c57600080fd5b5061012961021b3660046131bb565b611456565b6060806000805160206135088339815191526000805b60018301548110156102ba57856001600160a01b031683600001600085600101848154811061026757610267613246565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190206001015416036102a857816102a481613272565b9250505b806102b281613272565b915050610236565b506000816001600160401b038111156102d5576102d5612cc6565b6040519080825280602002602001820160405280156102fe578160200160208202803683370190505b5090506000826001600160401b0381111561031b5761031b612cc6565b60405190808252806020026020018201604052801561035457816020015b6103416128de565b8152602001906001900390816103395790505b50905060005b60018501548110156107f457876001600160a01b031685600001600087600101848154811061038b5761038b613246565b60009182526020808320909101546001600160a01b03908116845290830193909352604090910190206001015416036107e2578460000160008660010183815481106103d9576103d9613246565b60009182526020808320909101546001600160a01b03168352820192909252604090810190912081516101c081019092528054829082906104199061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546104459061328b565b80156104925780601f1061046757610100808354040283529160200191610492565b820191906000526020600020905b81548152906001019060200180831161047557829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820180546060909201916104cf9061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546104fb9061328b565b80156105485780601f1061051d57610100808354040283529160200191610548565b820191906000526020600020905b81548152906001019060200180831161052b57829003601f168201915b505050505081526020016004820180546105619061328b565b80601f016020809104026020016040519081016040528092919081815260200182805461058d9061328b565b80156105da5780601f106105af576101008083540402835291602001916105da565b820191906000526020600020905b8154815290600101906020018083116105bd57829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b031660408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916106329061328b565b80601f016020809104026020016040519081016040528092919081815260200182805461065e9061328b565b80156106ab5780601f10610680576101008083540402835291602001916106ab565b820191906000526020600020905b81548152906001019060200180831161068e57829003601f168201915b5050509183525050600b8201546020820152600c82015460409091019060ff1660058111156106dc576106dc612a82565b60058111156106ed576106ed612a82565b8152602001600d820180548060200260200160405190810160405280929190818152602001828054801561074a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161072c575b505050505081525050828561075e906132c5565b9550858151811061077157610771613246565b602002602001018190525084600101818154811061079157610791613246565b9060005260206000200160009054906101000a90046001600160a01b03168385815181106107c1576107c1613246565b60200260200101906001600160a01b031690816001600160a01b0316815250505b806107ec81613272565b91505061035a565b5090969095509350505050565b610101600061081c6000805160206134e88339815191525490565b90508060000361083c5761083c826000805160206134e883398151915255565b81810361085c5760405163887efaa560e01b815260040160405180910390fd5b801580159061087a57506000805160206134e8833981519152548216155b156108985760405163887efaa560e01b815260040160405180910390fd5b60005b8451811015610a7c5760008582815181106108b8576108b8613246565b6020026020010151905060006108cd82611ccc565b60008181527f600fcc152361d3982abba1c7da63e8ed79c28272e1cb6960e42211209375d5b4602052604090205490915060ff161561091f57604051630dc1019760e01b815260040160405180910390fd5b61092881611e75565b600061095283608001518389878151811061094557610945613246565b6020026020010151611eaf565b90508061097257604051638baa579f60e01b815260040160405180910390fd5b8251421015610994576040516338e5e54b60e21b815260040160405180910390fd5b60008084606001516001600160a01b031685604001518660a0015187608001516040516020016109c59291906132dc565b60408051601f19818403018152908290526109df9161330e565b60006040518083038185875af1925050503d8060008114610a1c576040519150601f19603f3d011682016040523d82523d6000602084013e610a21565b606091505b5091509150610a638560600151838360405180604001604052806015815260200174119bdc9dd85c99195c8810d85b1b0811985a5b1959605a1b815250611f7f565b5050505050508080610a7490613272565b91505061089b565b50610a93816000805160206134e883398151915255565b50505050565b610aa16128de565b610aaa82612008565b92915050565b6000610aba612391565b9050610ac58161240c565b15610ae35760405163a023275d60e01b815260040160405180910390fd5b6000610aed612391565b60405163b781a3fb60e01b81526001600160a01b03808316600483015260006024830152808b1660448301528b166064820152909150309063b781a3fb90608401600060405180830381600087803b158015610b4857600080fd5b505af1158015610b5c573d6000803e3d6000fd5b50505050610b72828b8b848b8b8b8f8c8c61243c565b7f72050865ba43dca306a7c9a249316457b134cf9751dcee5ef976e9d66668f898805460018101825560009182527fc700db3e7abd23adf08c93ce87d35a29897d1227fcf8b96a761f57a193d3d7970180546001600160a01b0319166001600160a01b038581169182179092556040519092918c16917ff91c401ec9e7a7f7987a949ca22fe503608aed50c54cb3d2b64039d8a4b60d4291a350505050505050505050565b6000610c2283612008565b90506000610c2e612515565b90506000826101a0015151118015610c525750610c50826101a0015182612542565b155b15610c7057604051636f6a1b8760e11b815260040160405180910390fd5b806001600160a01b0316846001600160a01b03167fa693cc36df1fe40153070ce1d1fa0a24afef2f6d99d8b3c3aa1b08bc446021cd85604051610cb3919061332a565b60405180910390a350505050565b6000610aaa8261240c565b60016000610ce66000805160206134e88339815191525490565b905080600003610d0657610d06826000805160206134e883398151915255565b818103610d265760405163887efaa560e01b815260040160405180910390fd5b8015801590610d4457506000805160206134e8833981519152548216155b15610d625760405163887efaa560e01b815260040160405180910390fd5b6000610d6d85612008565b60208101519091506001600160a01b03163314610d9d57604051636f6a1b8760e11b815260040160405180910390fd5b838161016001511015610dc35760405163a9cb9e0d60e01b815260040160405180910390fd5b610dcd85856125a7565b6040516001600160a01b0387169085156108fc029086906000818181858888f19350505050158015610e03573d6000803e3d6000fd5b5050610e1b816000805160206134e883398151915255565b5050505050565b7f72050865ba43dca306a7c9a249316457b134cf9751dcee5ef976e9d66668f898546060908190600080516020613508833981519152906000816001600160401b03811115610e7357610e73612cc6565b604051908082528060200260200182016040528015610e9c578160200160208202803683370190505b5090506000826001600160401b03811115610eb957610eb9612cc6565b604051908082528060200260200182016040528015610ef257816020015b610edf6128de565b815260200190600190039081610ed75790505b50905060005b600185015481101561133157846000016000866001018381548110610f1f57610f1f613246565b60009182526020808320909101546001600160a01b03168352820192909252604090810190912081516101c08101909252805482908290610f5f9061328b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f8b9061328b565b8015610fd85780601f10610fad57610100808354040283529160200191610fd8565b820191906000526020600020905b815481529060010190602001808311610fbb57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820180546060909201916110159061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546110419061328b565b801561108e5780601f106110635761010080835404028352916020019161108e565b820191906000526020600020905b81548152906001019060200180831161107157829003601f168201915b505050505081526020016004820180546110a79061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546110d39061328b565b80156111205780601f106110f557610100808354040283529160200191611120565b820191906000526020600020905b81548152906001019060200180831161110357829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b031660408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916111789061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546111a49061328b565b80156111f15780601f106111c6576101008083540402835291602001916111f1565b820191906000526020600020905b8154815290600101906020018083116111d457829003601f168201915b5050509183525050600b8201546020820152600c82015460409091019060ff16600581111561122257611222612a82565b600581111561123357611233612a82565b8152602001600d820180548060200260200160405190810160405280929190818152602001828054801561129057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611272575b50505050508152505082856112a4906132c5565b955085815181106112b7576112b7613246565b60200260200101819052508460010181815481106112d7576112d7613246565b9060005260206000200160009054906101000a90046001600160a01b031683858151811061130757611307613246565b6001600160a01b03909216602092830291909101909101528061132981613272565b915050610ef8565b50909590945092505050565b600160006113576000805160206134e88339815191525490565b90508060000361137757611377826000805160206134e883398151915255565b8181036113975760405163887efaa560e01b815260040160405180910390fd5b80158015906113b557506000805160206134e8833981519152548216155b156113d35760405163887efaa560e01b815260040160405180910390fd5b6113dc8361240c565b6113f957604051631535ac5f60e31b815260040160405180910390fd5b61140383346125e8565b604051349033906001600160a01b038616907fcfa8ce8f8d66cce7f7052bcba7d1f853a503d00896bcd7dfdb3ff4b1ad1f222d90600090a4611451816000805160206134e883398151915255565b505050565b61010260006114716000805160206134e88339815191525490565b90508060000361149157611491826000805160206134e883398151915255565b8181036114b15760405163887efaa560e01b815260040160405180910390fd5b80158015906114cf57506000805160206134e8833981519152548216155b156114ed5760405163887efaa560e01b815260040160405180910390fd5b3360009081527f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff960205260408120546001600160a01b03169061152f8b612008565b905060006115408260c00151612620565b604080516101c08101825282546001600160a01b031681526001830180548351602082810282018101909552818152929493808601939291908301828280156115b257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611594575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561162857602002820191906000526020600020905b815481526020019060010190808311611614575b5050509183525050600682015460208201526007820154604082015260088201546060820152600982015460ff808216151560808401526101009182900416151560a0830152600a83015460c0830152600b83015460e0830152600c9092015491015290506116d0836001600160a01b0390811660009081527f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff8602052604090205416151590565b6116ed5760405163d483c43f60e01b815260040160405180910390fd5b826001600160a01b031681602001518e8151811061170d5761170d613246565b60200260200101516001600160a01b03161461173c57604051636f6a1b8760e11b815260040160405180910390fd5b6040516278767760e81b81526001600160a01b03841660048201523090637876770090602401602060405180830381865afa15801561177f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a3919061333d565b6117c05760405163a9cb9e0d60e01b815260040160405180910390fd5b6117c983612662565b6002015460c08301516001600160a01b039081169116146117fd5760405163a9cb9e0d60e01b815260040160405180910390fd5b8715611846578061010001518260e0015110156118335761182e8c8360e001516001611829919061335a565b61268a565b611851565b61183e8c60026126b7565b505050611caa565b6118518c600061268a565b60006118608360400151612662565b9050878160070154146118865760405163a9cb9e0d60e01b815260040160405180910390fd5b600061189a6118958d4261336d565b612705565b905060148111156118be5760405163a9cb9e0d60e01b815260040160405180910390fd5b826101400151156119585761192b8460c001518f6118dc6001612721565b6001600160a01b0392831660009081527fdc662b6192622eddc6e089aea0ceba83a6d6004cf0824f8f89d137cc0bb9622760209081526040808320949095168252929092529190205416151590565b61195857610180840160055b9081600581111561194a5761194a612a82565b815250505050505050611caa565b81546001600160a01b038e166001600160a01b031990911617825560048201805460ff1916600217905561198f4262093a8061335a565b6006830155426005830155606083015161016085015110156119b75761018084016004611937565b4261010085015261012084018b9052600161018085015260005b8851811015611ca35760008982815181106119ee576119ee613246565b6020026020010151905060003a8260200151611a0a9190613394565b90506000611a1783611ccc565b60008181527f600fcc152361d3982abba1c7da63e8ed79c28272e1cb6960e42211209375d5b4602052604090205490915060ff1615611a6957604051630dc1019760e01b815260040160405180910390fd5b611a7281611e75565b8251421015611a94576040516338e5e54b60e21b815260040160405180910390fd5b60608701516040840151611aa8908461335a565b611ab2919061335a565b8861016001511015611ad757604051631e9acf1760e31b815260040160405180910390fd5b60608701516040840151611aeb908461335a565b611af5919061335a565b8861016001818151611b0791906133ab565b90525060005a905060008085606001516001600160a01b031686604001518760a001518860800151604051602001611b409291906132dc565b60408051601f1981840301815290829052611b5a9161330e565b60006040518083038185875af1925050503d8060008114611b97576040519150601f19603f3d011682016040523d82523d6000602084013e611b9c565b606091505b5091509150611bdd8660600151838360405180604001604052806014815260200173119d5b98dd1a5bdb8810d85b1b0811985a5b195960621b815250611f7f565b5060005a611beb90856133ab565b90508660200151811115611c1257604051635f48bcd360e11b815260040160405180910390fd5b6000611c1e3a83613394565b611c2890886133ab565b9050808d61016001818151611c3d919061335a565b90525060608c015133906108fc90611c553a86613394565b611c5f919061335a565b6040518115909202916000818181858888f19350505050158015611c87573d6000803e3d6000fd5b5050505050505050508080611c9b90613272565b9150506119d1565b5050505050505b611cc0816000805160206134e883398151915255565b50505050505050505050565b600080611cd883612741565b905060003090506000604051602001611d55907f454950373132446f6d61696e28737472696e67206e616d652c737472696e672081527f76657273696f6e2c75696e7432353620636861696e49642c6164647265737320602082015271766572696679696e67436f6e74726163742960701b604082015260520190565b60408051601f1981840301815282825280516020918201208383018352601d84527f537769746368626f6172644174746573746174696f6e53657276696365000000938201939093528151808301835260058152640312e302e360dc1b908201528151808201939093527f20d4191b0256662a146277a13913ba74eb4fa314faa58b7b6f51681fd40eb642838301527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c6060808501919091524660808501529490941b6001600160601b03191660a08301528051808303609401815260b48301825280519085012061190160f01b60d484015260f48301526101148083019590955280518083039095018552610134909101905250815191012092915050565b60009081527f600fcc152361d3982abba1c7da63e8ed79c28272e1cb6960e42211209375d5b460205260409020805460ff19166001179055565b60008151604214611ec257506000611f78565b600082600081518110611ed757611ed7613246565b016020015160f81c90506000611eee846001612870565b90506000611efd856021612870565b60408051600081526020810180835289905260ff86169181019190915260608101849052608081018290529091506001600160a01b0388169060019060a0016020604051602081039080840390855afa158015611f5e573d6000803e3d6000fd5b505050602060405103516001600160a01b03161493505050505b9392505050565b60608315611ff6578251600003611fef576000856001600160a01b03163b11611fef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081612000565b61200083836128b4565b949350505050565b6120106128de565b6001600160a01b038216600090815260008051602061350883398151915260205260409081902081516101c081019092528054829082906120509061328b565b80601f016020809104026020016040519081016040528092919081815260200182805461207c9061328b565b80156120c95780601f1061209e576101008083540402835291602001916120c9565b820191906000526020600020905b8154815290600101906020018083116120ac57829003601f168201915b505050918352505060018201546001600160a01b03908116602083015260028301541660408201526003820180546060909201916121069061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546121329061328b565b801561217f5780601f106121545761010080835404028352916020019161217f565b820191906000526020600020905b81548152906001019060200180831161216257829003601f168201915b505050505081526020016004820180546121989061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546121c49061328b565b80156122115780601f106121e657610100808354040283529160200191612211565b820191906000526020600020905b8154815290600101906020018083116121f457829003601f168201915b50505091835250506005820154602082015260068201546001600160a01b031660408201526007820154606082015260088201546080820152600982015460a0820152600a8201805460c0909201916122699061328b565b80601f01602080910402602001604051908101604052809291908181526020018280546122959061328b565b80156122e25780601f106122b7576101008083540402835291602001916122e2565b820191906000526020600020905b8154815290600101906020018083116122c557829003601f168201915b5050509183525050600b8201546020820152600c82015460409091019060ff16600581111561231357612313612a82565b600581111561232457612324612a82565b8152602001600d820180548060200260200160405190810160405280929190818152602001828054801561238157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612363575b5050505050815250509050919050565b6000807f20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b580546000906123c390613272565b91829055506123d36001436133ab565b406040516020016123ee929190918252602082015260400190565b60408051601f19818403018152919052805160209091012092915050565b6001600160a01b039081166000908152600080516020613508833981519152602052604090206001015416151590565b6001600160a01b038a166000908152600080516020613508833981519152602052604090208061246c8b8261340c565b506001810180546001600160a01b03808c166001600160a01b031992831617909255600283018054928b1692909116919091179055600381016124af888261340c565b50600481016124be878261340c565b50600581018590556006810180546001600160a01b0319166001600160a01b038616179055600a81016124f1848261340c565b50815161250790600d830190602085019061297c565b505050505050505050505050565b336014361080159061252f57506001600160a01b03811630145b1561253f575060131936013560601c5b90565b6000805b835181101561259d57826001600160a01b031684828151811061256b5761256b613246565b60200260200101516001600160a01b03160361258b576001915050610aaa565b8061259581613272565b915050612546565b5060009392505050565b6001600160a01b038216600090815260008051602061350883398151915260205260408120600b0180548392906125df9084906133ab565b90915550505050565b6001600160a01b038216600090815260008051602061350883398151915260205260408120600b0180548392906125df90849061335a565b60007f60afd68830977364a6093883acfe9f98da214c7c3590e74cf82ad9ef006ddc3e5b6001600160a01b039092166000908152602092909252506040902090565b60007f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff8612644565b6001600160a01b039190911660009081526000805160206135088339815191526020526040902060070155565b6001600160a01b038216600090815260008051602061350883398151915260205260409020600c01805482919060ff191660018360058111156126fc576126fc612a82565b02179055505050565b60008082121561271d57612718826134cb565b610aaa565b5090565b60008082600281111561273657612736612a82565b6001901b9392505050565b60006040516020016127d7907f5472616e73616374696f6e2875696e743235362065787069726174696f6e546981527f6d655365636f6e64732c75696e74323536206761734c696d69742c75696e743260208201527f35362076616c75652c6164647265737320746f2c616464726573732066726f6d60408201526b2c627974657320646174612960a01b6060820152606c0190565b60408051601f198184030181528282528051602091820120855186830151878501516060808a01516080808c015160a0808e01518051908b0120998c0198909852988a019590955281890193909352928701526001600160601b031990821b8116928601929092529290921b90911660b483015260c882015260e801604051602081830303815290604052805190602001209050919050565b600061287d82602061335a565b8351101561289e5760405163a9cb9e0d60e01b815260040160405180910390fd5b6128a960208361335a565b929092015192915050565b8151156128c45781518083602001fd5b8060405162461bcd60e51b8152600401611fe6919061332a565b604051806101c001604052806060815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160608152602001606081526020016000801916815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160608152602001600081526020016000600581111561296f5761296f612a82565b8152602001606081525090565b8280548282559060005260206000209081019282156129d1579160200282015b828111156129d157825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019061299c565b5061271d9291505b8082111561271d57600081556001016129d9565b6001600160a01b0381168114612a0257600080fd5b50565b8035612a10816129ed565b919050565b600060208284031215612a2757600080fd5b8135611f78816129ed565b60005b83811015612a4d578181015183820152602001612a35565b50506000910152565b60008151808452612a6e816020860160208601612a32565b601f01601f19169290920160200192915050565b634e487b7160e01b600052602160045260246000fd5b60068110612ab657634e487b7160e01b600052602160045260246000fd5b9052565b600081518084526020808501945080840160005b83811015612af35781516001600160a01b031687529582019590820190600101612ace565b509495945050505050565b60006101c08251818552612b1482860182612a56565b9150506020830151612b3160208601826001600160a01b03169052565b506040830151612b4c60408601826001600160a01b03169052565b5060608301518482036060860152612b648282612a56565b91505060808301518482036080860152612b7e8282612a56565b91505060a083015160a085015260c0830151612ba560c08601826001600160a01b03169052565b5060e08381015190850152610100808401519085015261012080840151908501526101408084015185830382870152612bde8382612a56565b9250505061016080840151818601525061018080840151612c0182870182612a98565b50506101a08084015185830382870152612c1b8382612aba565b9695505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612c675781516001600160a01b031684529284019290840190600101612c42565b50505083810382850152845180825282820190600581901b8301840187850160005b83811015612cb757601f19868403018552612ca5838351612afe565b94870194925090860190600101612c89565b50909998505050505050505050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715612cfe57612cfe612cc6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715612d2c57612d2c612cc6565b604052919050565b60006001600160401b03821115612d4d57612d4d612cc6565b5060051b60200190565b600082601f830112612d6857600080fd5b81356001600160401b03811115612d8157612d81612cc6565b612d94601f8201601f1916602001612d04565b818152846020838601011115612da957600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612dd757600080fd5b81356020612dec612de783612d34565b612d04565b82815260059290921b84018101918181019086841115612e0b57600080fd5b8286015b84811015612ecb5780356001600160401b0380821115612e2f5760008081fd5b9088019060c0828b03601f1901811315612e495760008081fd5b612e51612cdc565b87840135815260408085013589830152606080860135828401526080915081860135612e7c816129ed565b9083015260a085810135612e8f816129ed565b83830152928501359284841115612ea857600091508182fd5b612eb68e8b86890101612d57565b90830152508652505050918301918301612e0f565b509695505050505050565b60008060408385031215612ee957600080fd5b82356001600160401b0380821115612f0057600080fd5b612f0c86838701612dc6565b9350602091508185013581811115612f2357600080fd5b8501601f81018713612f3457600080fd5b8035612f42612de782612d34565b81815260059190911b82018401908481019089831115612f6157600080fd5b8584015b83811015612f9957803586811115612f7d5760008081fd5b612f8b8c8983890101612d57565b845250918601918601612f65565b508096505050505050509250929050565b602081526000611f786020830184612afe565b600082601f830112612fce57600080fd5b81356020612fde612de783612d34565b82815260059290921b84018101918181019086841115612ffd57600080fd5b8286015b84811015612ecb578035613014816129ed565b8352918301918301613001565b600080600080600080600080610100898b03121561303e57600080fd5b88356001600160401b038082111561305557600080fd5b6130618c838d01612d57565b995061306f60208c01612a05565b985061307d60408c01612a05565b975060608b013591508082111561309357600080fd5b61309f8c838d01612d57565b965060808b01359150808211156130b557600080fd5b6130c18c838d01612d57565b955060a08b0135945060c08b01359150808211156130de57600080fd5b6130ea8c838d01612d57565b935060e08b013591508082111561310057600080fd5b5061310d8b828c01612fbd565b9150509295985092959890939650565b6000806040838503121561313057600080fd5b823561313b816129ed565b915060208301356001600160401b0381111561315657600080fd5b61316285828601612d57565b9150509250929050565b60008060006060848603121561318157600080fd5b833561318c816129ed565b9250602084013561319c816129ed565b929592945050506040919091013590565b8015158114612a0257600080fd5b600080600080600080600080610100898b0312156131d857600080fd5b8835975060208901356131ea816129ed565b965060408901356131fa816129ed565b9550606089013594506080890135935060a0890135613218816131ad565b925060c0890135915060e08901356001600160401b0381111561323a57600080fd5b61310d8b828c01612dc6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016132845761328461325c565b5060010190565b600181811c9082168061329f57607f821691505b6020821081036132bf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000816132d4576132d461325c565b506000190190565b600083516132ee818460208801612a32565b60609390931b6001600160601b0319169190920190815260140192915050565b60008251613320818460208701612a32565b9190910192915050565b602081526000611f786020830184612a56565b60006020828403121561334f57600080fd5b8151611f78816131ad565b80820180821115610aaa57610aaa61325c565b818103600083128015838313168383128216171561338d5761338d61325c565b5092915050565b8082028115828204841417610aaa57610aaa61325c565b81810381811115610aaa57610aaa61325c565b601f82111561145157600081815260208120601f850160051c810160208610156133e55750805b601f850160051c820191505b81811015613404578281556001016133f1565b505050505050565b81516001600160401b0381111561342557613425612cc6565b61343981613433845461328b565b846133be565b602080601f83116001811461346e57600084156134565750858301515b600019600386901b1c1916600185901b178555613404565b600085815260208120601f198616915b8281101561349d5788860151825594840194600190910190840161347e565b50858210156134bb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000600160ff1b82016134e0576134e061325c565b506000039056fe20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b672050865ba43dca306a7c9a249316457b134cf9751dcee5ef976e9d66668f897a2646970667358221220aa08768a7768e912dc52f99a464304469fc54ba73bf222e08913aef3b42b24af64736f6c63430008110033";

type SbFunctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SbFunctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SbFunction__factory extends ContractFactory {
  constructor(...args: SbFunctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SbFunction> {
    return super.deploy(overrides || {}) as Promise<SbFunction>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SbFunction {
    return super.attach(address) as SbFunction;
  }
  override connect(signer: Signer): SbFunction__factory {
    return super.connect(signer) as SbFunction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SbFunctionInterface {
    return new utils.Interface(_abi) as SbFunctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SbFunction {
    return new Contract(address, _abi, signerOrProvider) as SbFunction;
  }
}
