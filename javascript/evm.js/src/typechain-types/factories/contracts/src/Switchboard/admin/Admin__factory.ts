/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  Admin,
  AdminInterface,
} from "../../../../../contracts/src/Switchboard/admin/Admin";

const _abi = [
  {
    inputs: [],
    name: "ACLAdminAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setAllowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610512806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806324d7806c1461005c5780634697f05d146100835780634b0bddd2146100985780638129fc1c146100ab578063babcc539146100b3575b600080fd5b61006f61006a36600461047e565b6100c6565b604051901515815260200160405180910390f35b6100966100913660046104a0565b6100d7565b005b6100966100a63660046104a0565b610235565b61009661024b565b61006f6100c136600461047e565b6102d4565b60006100d1826102ea565b92915050565b600160006101037f20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b65490565b9050610115610110610327565b610354565b156101335760405163887efaa560e01b815260040160405180910390fd5b8181036101535760405163887efaa560e01b815260040160405180910390fd5b808211801561016157508015155b1561017f5760405163887efaa560e01b815260040160405180910390fd5b61018f61018a610327565b6102ea565b6101c45761019b610327565b6040516275103f60e11b81526001600160a01b0390911660048201526024015b60405180910390fd5b6001600160a01b03841660009081527fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c82560205260409020805460ff191684151517905561022f817f20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b655565b50505050565b61023d610391565b6102478282610418565b5050565b7fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c8235460ff161561028e57604051637373cb0d60e01b815260040160405180910390fd5b610296610391565b6102a1336001610418565b6102d27fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c823805460ff19166001179055565b565b60006102df82610354565b806100d157506100d1825b6001600160a01b031660009081527fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c824602052604090205460ff1690565b336014361080159061034157506001600160a01b03811630145b15610351575060131936013560601c5b90565b6001600160a01b031660009081527fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c825602052604090205460ff1690565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c600401546001600160a01b031633146102d25760405162461bcd60e51b815260206004820152602260248201527f4c69624469616d6f6e643a204d75737420626520636f6e7472616374206f776e60448201526132b960f11b60648201526084016101bb565b6001600160a01b039190911660009081527fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c82460205260409020805460ff1916911515919091179055565b80356001600160a01b038116811461047957600080fd5b919050565b60006020828403121561049057600080fd5b61049982610462565b9392505050565b600080604083850312156104b357600080fd5b6104bc83610462565b9150602083013580151581146104d157600080fd5b80915050925092905056fea2646970667358221220bbced14e28464787b5ffb07492dcf8a5faf436bc04fa8f5499528c939aa4d9e964736f6c63430008110033";

type AdminConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AdminConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Admin__factory extends ContractFactory {
  constructor(...args: AdminConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Admin> {
    return super.deploy(overrides || {}) as Promise<Admin>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Admin {
    return super.attach(address) as Admin;
  }
  override connect(signer: Signer): Admin__factory {
    return super.connect(signer) as Admin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AdminInterface {
    return new utils.Interface(_abi) as AdminInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Admin {
    return new Contract(address, _abi, signerOrProvider) as Admin;
  }
}
