/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  AttestationServiceErrorLib,
  AttestationServiceErrorLibInterface,
} from "../../../../../contracts/src/Switchboard/errors/AttestationServiceErrorLib";

const _abi = [
  {
    inputs: [],
    name: "AlreadyExecuted",
    type: "error",
  },
  {
    inputs: [],
    name: "AttestationQueueAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "AttestationQueueDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "GasLimitExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientNodes",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "QuoteAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "QuoteDoesNotExist",
    type: "error",
  },
  {
    inputs: [],
    name: "TransactionExpired",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204375c11241eecdc69599fa5a5ffcec8c4ca5919d5c2315c486fc73791c4e131864736f6c63430008110033";

type AttestationServiceErrorLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttestationServiceErrorLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttestationServiceErrorLib__factory extends ContractFactory {
  constructor(...args: AttestationServiceErrorLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttestationServiceErrorLib> {
    return super.deploy(overrides || {}) as Promise<AttestationServiceErrorLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AttestationServiceErrorLib {
    return super.attach(address) as AttestationServiceErrorLib;
  }
  override connect(signer: Signer): AttestationServiceErrorLib__factory {
    return super.connect(signer) as AttestationServiceErrorLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttestationServiceErrorLibInterface {
    return new utils.Interface(_abi) as AttestationServiceErrorLibInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttestationServiceErrorLib {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as AttestationServiceErrorLib;
  }
}
