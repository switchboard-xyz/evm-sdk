/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  AttestationQueue,
  AttestationQueueInterface,
} from "../../attestationQueue/AttestationQueue";

const _abi = [
  {
    inputs: [],
    name: "AttestationQueueAlreadyExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "AddMrEnclave",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountAddress",
        type: "address",
      },
    ],
    name: "AttestationQueueAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "RemoveMrEnclave",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "addMrEnclaveToAttestationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "attestationQueueHasMrEnclave",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "attestiationQueues",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "data",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "maxSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastHeartbeat",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "mrEnclaves",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "maxQuoteVerificationAge",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allowAuthorityOverrideAfter",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxConsecutiveFunctionFailures",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "requireAuthorityHeartbeatPermission",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "requireUsagePermissions",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "quoteTimeout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gcIdx",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currIdx",
            type: "uint256",
          },
        ],
        internalType: "struct AttestationQueueLib.AttestationQueue",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quoteTimeout",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxQuoteVerificationAge",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allowAuthorityOverrideAfter",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "requireAuthorityHeartbeatPermission",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "requireUsagePermissions",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "maxConsecutiveFunctionFailures",
        type: "uint256",
      },
    ],
    name: "createAttestationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "quoteId",
        type: "address",
      },
    ],
    name: "getQuoteIdx",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "removeMrEnclaveFromAttestationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quoteTimeout",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxQuoteVerificationAge",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allowAuthorityOverrideAfter",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "requireAuthorityHeartbeatPermission",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "requireUsagePermissions",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "maxConsecutiveFunctionFailures",
        type: "uint256",
      },
    ],
    name: "setAttestationQueueConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061105f806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ad435b9d1161005b578063ad435b9d146100df578063cd7bed71146100f2578063de77685114610113578063f7d483071461012657600080fd5b8063083f30cf1461008257806363fcd771146100975780639e48a1c1146100bf575b600080fd5b610095610090366004610ccb565b610139565b005b6100aa6100a5366004610ccb565b610255565b60405190151581526020015b60405180910390f35b6100d26100cd366004610cf5565b6103e5565b6040516100b69190610d8b565b6100956100ed366004610ccb565b6105be565b610105610100366004610cf5565b6106fc565b6040519081526020016100b6565b610095610121366004610e8d565b6108ea565b610095610134366004610f0b565b61099b565b600060008051602061100a8339815191526001600160a01b03848116600090815260208390526040902080549293509116331461018957604051636f6a1b8760e11b815260040160405180910390fd5b6101e5816005018054806020026020016040519081016040528092919081815260200182805480156101da57602002820191906000526020600020905b8154815260200190600101908083116101c6575b505050505084610a0b565b6102025760405163a9cb9e0d60e01b815260040160405180910390fd5b61020c8484610a5e565b836001600160a01b03167f70c486974a3cebaf9593da3dc40af01ae059a47c48b9caff38ef2cc5180dc13e8460405161024791815260200190565b60405180910390a250505050565b60008060008051602061100a8339815191526001600160a01b0380861660009081526020838152604080832081516101c0810183528154909516855260018101805483518186028101860190945280845296975093959093858401939091908301828280156102ed57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116102cf575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561036357602002820191906000526020600020905b81548152602001906001019080831161034f575b5050509183525050600682015460208201526007820154604082015260088201546060820152600982015460ff808216151560808401526101009182900416151560a080840191909152600a84015460c0840152600b84015460e0840152600c909301549101528101519091506103da9085610a0b565b925050505b92915050565b610464604051806101c0016040528060006001600160a01b0316815260200160608152602001600081526020016000815260200160008152602001606081526020016000815260200160008152602001600081526020016000151581526020016000151581526020016000815260200160008152602001600081525090565b61046d82610b4f565b604080516101c08101825282546001600160a01b031681526001830180548351602082810282018101909552818152929493808601939291908301828280156104df57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104c1575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561055557602002820191906000526020600020905b815481526020019060010190808311610541575b5050509183525050600682015460208201526007820154604082015260088201546060820152600982015460ff808216151560808401526101009182900416151560a0830152600a83015460c0830152600b83015460e0830152600c9092015491015292915050565b600060008051602061100a8339815191526001600160a01b03848116600090815260208390526040902080549293509116331461060e57604051636f6a1b8760e11b815260040160405180910390fd5b610668816005018054806020026020016040519081016040528092919081815260200182805480156101da57602002820191906000526020600020908154815260200190600101908083116101c657505050505084610a0b565b156106865760405163a9cb9e0d60e01b815260040160405180910390fd5b6001600160a01b038416600090815260008051602061100a8339815191526020908152604082206005018054600181018255908352912001839055836001600160a01b03167f3a51d130f8b06abddb1f2e9a84d0c1ee5da028c468f178bd42ccab055e6d15ff8460405161024791815260200190565b600060008051602061100a83398151915281818161071986610b7f565b600201546001600160a01b039081168252602080830193909352604091820160002082516101c08101845281549092168252600181018054845181870281018701909552808552929491938583019390928301828280156107a357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610785575b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820180548060200260200160405190810160405280929190818152602001828054801561081957602002820191906000526020600020905b815481526020019060010190808311610805575b5050509183525050600682015460208201526007820154604082015260088201546060820152600982015460ff808216151560808401526101009182900416151560a0830152600a83015460c0830152600b83015460e0830152600c90920154910152905060005b8160200151518110156108de57846001600160a01b0316826020015182815181106108ae576108ae610f9b565b60200260200101516001600160a01b0316036108cc57949350505050565b806108d681610fc7565b915050610881565b50600019949350505050565b60006108f4610ba7565b6001600160a01b03808216600090815260008051602061100a8339815191526020526040902054919250161561093d576040516394f62ae960e01b815260040160405180910390fd5b61094f818b8b8b8b8b8b8b8b8b610c22565b806001600160a01b03168a6001600160a01b03167ff0beb01d51eb726cb1315c7a5f4fa8399a9a1f002a871dcefd49a43032a7d3a760405160405180910390a350505050505050505050565b600060008051602061100a8339815191526001600160a01b038c811660009081526020839052604090208054929350911633146109eb57604051636f6a1b8760e11b815260040160405180910390fd5b6109fd8c8c8c8c8c8c8c8c8c8c610c22565b505050505050505050505050565b6000805b8351811015610a545782848281518110610a2b57610a2b610f9b565b602002602001015103610a425760019150506103df565b80610a4c81610fc7565b915050610a0f565b5060009392505050565b6001600160a01b038216600090815260008051602061100a83398151915260208190526040822090915b6005820154811015610b485783826005018281548110610aaa57610aaa610f9b565b906000526020600020015403610b3657600582018054610acc90600190610fe0565b81548110610adc57610adc610f9b565b9060005260206000200154826005018281548110610afc57610afc610f9b565b60009182526020909120015560058201805480610b1b57610b1b610ff3565b60019003818190600052602060002001600090559055610b48565b80610b4081610fc7565b915050610a88565b5050505050565b600060008051602061100a8339815191525b6001600160a01b039092166000908152602092909252506040902090565b60007f796cc27ebb3d5f2ef0c26a4fcf625e833d0e59a50256f2d9d2edb5d6dc607ff8610b61565b6000807f20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b58054600090610bd990610fc7565b9182905550610be9600143610fe0565b40604051602001610c04929190918252602082015260400190565b60408051601f19818403018152919052805160209091012092915050565b6001600160a01b03998a16600090815260008051602061100a8339815191526020526040902080546001600160a01b03191699909a1698909817895560028901969096556003880194909455600a8701929092556006860155600785015560098401805461ffff191691151561ff0019169190911761010092151592909202919091179055600890910155565b80356001600160a01b0381168114610cc657600080fd5b919050565b60008060408385031215610cde57600080fd5b610ce783610caf565b946020939093013593505050565b600060208284031215610d0757600080fd5b610d1082610caf565b9392505050565b600081518084526020808501945080840160005b83811015610d505781516001600160a01b031687529582019590820190600101610d2b565b509495945050505050565b600081518084526020808501945080840160005b83811015610d5057815187529582019590820190600101610d6f565b60208152610da56020820183516001600160a01b03169052565b600060208301516101c0806040850152610dc36101e0850183610d17565b91506040850151606085015260608501516080850152608085015160a085015260a0850151601f198584030160c0860152610dfe8382610d5b565b92505060c085015160e085015260e0850151610100818187015280870151915050610120818187015280870151915050610140610e3e8187018315159052565b8601519050610160610e538682018315159052565b860151610180868101919091528601516101a0808701919091529095015193019290925250919050565b80358015158114610cc657600080fd5b60008060008060008060008060006101208a8c031215610eac57600080fd5b610eb58a610caf565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a01359350610ee660c08b01610e7d565b9250610ef460e08b01610e7d565b91506101008a013590509295985092959850929598565b6000806000806000806000806000806101408b8d031215610f2b57600080fd5b610f348b610caf565b9950610f4260208c01610caf565b985060408b0135975060608b0135965060808b0135955060a08b0135945060c08b01359350610f7360e08c01610e7d565b9250610f826101008c01610e7d565b91506101208b013590509295989b9194979a5092959850565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201610fd957610fd9610fb1565b5060010190565b818103818111156103df576103df610fb1565b634e487b7160e01b600052603160045260246000fdfe60afd68830977364a6093883acfe9f98da214c7c3590e74cf82ad9ef006ddc3ea2646970667358221220193cb8ca073662fce60f6c5b1f3ae4140578bdcac92529479d5e71793e20702f64736f6c63430008110033";

type AttestationQueueConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttestationQueueConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttestationQueue__factory extends ContractFactory {
  constructor(...args: AttestationQueueConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AttestationQueue> {
    return super.deploy(overrides || {}) as Promise<AttestationQueue>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AttestationQueue {
    return super.attach(address) as AttestationQueue;
  }
  override connect(signer: Signer): AttestationQueue__factory {
    return super.connect(signer) as AttestationQueue__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttestationQueueInterface {
    return new utils.Interface(_abi) as AttestationQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttestationQueue {
    return new Contract(address, _abi, signerOrProvider) as AttestationQueue;
  }
}
