/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  Switchboard,
  SwitchboardInterface,
} from "../../../hardhat-diamond-abi/HardhatDiamondABI.sol/Switchboard";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    inputs: [],
    name: "ACLAdminAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAdmin",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "isAllowed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    name: "setAllowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "AggregatorAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "AggregatorDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "EarlyOracleResponse",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasSpent",
        type: "uint256",
      },
    ],
    name: "ExcessiveGasSpent",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receivedBalance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "InsufficientSamples",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "IntervalHistoryNotRecorded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedQueueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedQueueId",
        type: "address",
      },
    ],
    name: "QueuesDoNotMatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "aggregators",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "results",
        type: "uint256",
      },
    ],
    name: "SubmittedResultsMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AggregatorAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AggregatorFundEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "intervalId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "balanceLeftForInterval",
        type: "uint256",
      },
    ],
    name: "AggregatorIntervalRefreshed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "intervalId",
        type: "uint256",
      },
    ],
    name: "AggregatorOpenInterval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "reader",
        type: "address",
      },
      {
        indexed: false,
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "AggregatorRead",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oracle",
        type: "address",
      },
      {
        indexed: true,
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "AggregatorSaveResult",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minUpdateDelaySeconds",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minOracleResults",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "varianceThreshold",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minJobResults",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "forceReportPeriod",
        type: "uint256",
      },
    ],
    name: "AggregatorSettingsUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "int256",
        name: "value",
        type: "int256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "AggregatorUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AggregatorWithdrawEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "OraclePayoutEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "aggregatorEscrowFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "aggregatorEscrowWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    name: "aggregatorHistory",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "medianTimestamp",
            type: "uint256",
          },
        ],
        internalType: "struct AggregatorLib.AggregatorHistoryResult",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "aggregators",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "value",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "oracleId",
                type: "address",
              },
            ],
            internalType: "struct AggregatorLib.Result",
            name: "latestResult",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "batchSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minUpdateDelaySeconds",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minOracleResults",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minJobResults",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "forceReportPeriod",
                type: "uint256",
              },
            ],
            internalType: "struct AggregatorLib.AggregatorConfig",
            name: "config",
            type: "tuple",
          },
          {
            internalType: "string",
            name: "jobsHash",
            type: "string",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceLeftForInterval",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextIntervalRefreshTime",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "intervalId",
            type: "uint80",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "historyEnabled",
            type: "bool",
          },
        ],
        internalType: "struct AggregatorLib.Aggregator",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "batchSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minUpdateDelaySeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minOracleResults",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "jobsHash",
        type: "string",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "varianceThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minJobResults",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forceReportPeriod",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "enableHistory",
        type: "bool",
      },
    ],
    name: "createAggregator",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getAggregatorsByAuthority",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "value",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "oracleId",
                type: "address",
              },
            ],
            internalType: "struct AggregatorLib.Result",
            name: "latestResult",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "batchSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minUpdateDelaySeconds",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minOracleResults",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minJobResults",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "forceReportPeriod",
                type: "uint256",
              },
            ],
            internalType: "struct AggregatorLib.AggregatorConfig",
            name: "config",
            type: "tuple",
          },
          {
            internalType: "string",
            name: "jobsHash",
            type: "string",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceLeftForInterval",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextIntervalRefreshTime",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "intervalId",
            type: "uint80",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "historyEnabled",
            type: "bool",
          },
        ],
        internalType: "struct AggregatorLib.Aggregator[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllAggregators",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "value",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "timestamp",
                type: "uint256",
              },
              {
                internalType: "address",
                name: "oracleId",
                type: "address",
              },
            ],
            internalType: "struct AggregatorLib.Result",
            name: "latestResult",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "batchSize",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minUpdateDelaySeconds",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minOracleResults",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "minJobResults",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "forceReportPeriod",
                type: "uint256",
              },
            ],
            internalType: "struct AggregatorLib.AggregatorConfig",
            name: "config",
            type: "tuple",
          },
          {
            internalType: "string",
            name: "jobsHash",
            type: "string",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balanceLeftForInterval",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "nextIntervalRefreshTime",
            type: "uint256",
          },
          {
            internalType: "uint80",
            name: "intervalId",
            type: "uint80",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "historyEnabled",
            type: "bool",
          },
        ],
        internalType: "struct AggregatorLib.Aggregator[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "getCurrentIntervalId",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        internalType: "uint80",
        name: "intervalId",
        type: "uint80",
      },
    ],
    name: "getIntervalResult",
    outputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "medianTimestamp",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "latestResult",
    outputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "openInterval",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "ids",
        type: "address[]",
      },
      {
        internalType: "int256[]",
        name: "results",
        type: "int256[]",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "oracleIdx",
        type: "uint256",
      },
    ],
    name: "saveResults",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "batchSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minUpdateDelaySeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minOracleResults",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "jobsHash",
        type: "string",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "varianceThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minJobResults",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forceReportPeriod",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "enableHistory",
        type: "bool",
      },
    ],
    name: "setAggregatorConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "viewAggregatorResults",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "value",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "oracleId",
            type: "address",
          },
        ],
        internalType: "struct AggregatorLib.Result[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "viewLatestResult",
    outputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
    ],
    name: "AttestationQueueAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "argumentIndex",
        type: "uint256",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "MrEnclaveNotAllowed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "AddMrEnclave",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "AttestationQueueAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
    ],
    name: "AttestationQueuePermissionUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "AttestationQueueSetConfig",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "RemoveMrEnclave",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "addMrEnclaveToAttestationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "attestationQueueHasMrEnclave",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "attestationQueues",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "data",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "maxSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastHeartbeat",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "mrEnclaves",
            type: "bytes32[]",
          },
          {
            internalType: "uint256",
            name: "maxEnclaveVerificationAge",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "allowAuthorityOverrideAfter",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxConsecutiveFunctionFailures",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "requireAuthorityHeartbeatPermission",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "requireUsagePermissions",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "enclaveTimeout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gcIdx",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currIdx",
            type: "uint256",
          },
        ],
        internalType: "struct AttestationQueueLib.AttestationQueue",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "enclaveTimeout",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxEnclaveVerificationAge",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allowAuthorityOverrideAfter",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "requireAuthorityHeartbeatPermission",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "requireUsagePermissions",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "maxConsecutiveFunctionFailures",
        type: "uint256",
      },
    ],
    name: "createAttestationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getAttestationQueueMrEnclaves",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "getEnclaveIdx",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getEnclaves",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "removeMrEnclaveFromAttestationQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "enclaveTimeout",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxEnclaveVerificationAge",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "allowAuthorityOverrideAfter",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "requireAuthorityHeartbeatPermission",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "requireUsagePermissions",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "maxConsecutiveFunctionFailures",
        type: "uint256",
      },
    ],
    name: "setAttestationQueueConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "on",
        type: "bool",
      },
    ],
    name: "setAttestationQueuePermission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initializationContractAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "InitializationFunctionReverted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        indexed: false,
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "DiamondCut",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "enum IDiamondCut.FacetCutAction",
            name: "action",
            type: "uint8",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondCut.FacetCut[]",
        name: "_diamondCut",
        type: "tuple[]",
      },
      {
        internalType: "address",
        name: "_init",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_calldata",
        type: "bytes",
      },
    ],
    name: "diamondCut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "facetFunctionSelectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "enclaveIdx",
        type: "uint256",
      },
    ],
    name: "EnclaveNotAtQueueIdx",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveNotOnQueue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveNotReadyForVerification",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveUnverified",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "ForceOverrideNotReady",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxExpectedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reportedTime",
        type: "uint256",
      },
    ],
    name: "IncorrectReportedTime",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receivedBalance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "argumentIndex",
        type: "uint256",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "InvalidEnclave",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedSigner",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "InvalidStatus",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "MrEnclaveNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
    ],
    name: "PermissionDenied",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedQueueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedQueueId",
        type: "address",
      },
    ],
    name: "QueuesDoNotMatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "EnclaveAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "queue",
        type: "address",
      },
    ],
    name: "EnclaveGC",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "EnclaveHeartbeat",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nodeId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "EnclavePayoutEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oldSigner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newSigner",
        type: "address",
      },
    ],
    name: "EnclaveRotateSigner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "verifier",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "verifiee",
        type: "address",
      },
    ],
    name: "EnclaveVerifyRequest",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "createEnclave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "createEnclaveWithId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "enclaveIdx",
        type: "uint256",
      },
    ],
    name: "enclaveGarbageCollect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "enclaveHeartbeat",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    name: "enclaveSignerToEnclaveId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "enclaves",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "cid",
            type: "bytes",
          },
          {
            internalType: "enum EnclaveLib.VerificationStatus",
            name: "verificationStatus",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "verificationTimestamp",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "validUntil",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "mrEnclave",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "isOnQueue",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "lastHeartbeat",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct EnclaveLib.Enclave",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "verifierId",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "verifierIdx",
        type: "uint256",
      },
    ],
    name: "failEnclave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "forceOverrideVerify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "isEnclaveValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "address",
        name: "newSigner",
        type: "address",
      },
    ],
    name: "rotateEnclaveSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "cid",
        type: "bytes",
      },
    ],
    name: "updateEnclave",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "validMeasurements",
        type: "bytes32[]",
      },
    ],
    name: "validate",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "verifierId",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "enclaveIdx",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "verifyEnclave",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "ACLAdminAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "AggregatorAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "AggregatorDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
    ],
    name: "AlreadyExecuted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
    ],
    name: "AttestationQueueAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
    ],
    name: "AttestationQueueDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "EarlyOracleResponse",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "enclaveIdx",
        type: "uint256",
      },
    ],
    name: "EnclaveNotAtQueueIdx",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveNotOnQueue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveNotReadyForVerification",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveUnverified",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasSpent",
        type: "uint256",
      },
    ],
    name: "ExcessiveGasSpent",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "ForceOverrideNotReady",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "FunctionCallerNotPermitted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "FunctionFeeTooLow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "received",
        type: "address",
      },
    ],
    name: "FunctionIncorrectTarget",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "expected",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "received",
        type: "bytes32",
      },
    ],
    name: "FunctionMrEnclaveMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "current",
        type: "address",
      },
      {
        internalType: "address",
        name: "received",
        type: "address",
      },
    ],
    name: "FunctionSignerAlreadySet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "used",
        type: "uint256",
      },
    ],
    name: "GasLimitExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxExpectedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reportedTime",
        type: "uint256",
      },
    ],
    name: "IncorrectReportedTime",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receivedBalance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "InsufficientNodes",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "InsufficientSamples",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "aggregatorId",
        type: "address",
      },
    ],
    name: "IntervalHistoryNotRecorded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "argumentIndex",
        type: "uint256",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "InvalidEnclave",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedSender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedSigner",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "InvalidStatus",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "MrEnclaveNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "oracleIdx",
        type: "uint256",
      },
    ],
    name: "OracleNotAtQueueIdx",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleNotOnQueue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleQueueId",
        type: "address",
      },
    ],
    name: "OracleQueueDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
    ],
    name: "PermissionDenied",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedQueueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedQueueId",
        type: "address",
      },
    ],
    name: "QueuesDoNotMatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "aggregators",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "results",
        type: "uint256",
      },
    ],
    name: "SubmittedResultsMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
    ],
    name: "TransactionExpired",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "FunctionCallerNotPermitted",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
    ],
    name: "FunctionFeeTooLow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "callId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "FunctionCallEvent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FunctionCallFund",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "params",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [
      {
        internalType: "address",
        name: "callId",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "functionCallSettings",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "requireEstimatedRunCostFee",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "minimumFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxGasCost",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "requireCallerPayFullCost",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "requireSenderBeReturnAddress",
            type: "bool",
          },
        ],
        internalType: "struct FunctionCallLib.FunctionCallSettings",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "callId",
        type: "address",
      },
    ],
    name: "functionCalls",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "functionId",
            type: "address",
          },
          {
            internalType: "address",
            name: "caller",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feePaid",
            type: "uint256",
          },
        ],
        internalType: "struct FunctionCallLib.FunctionCall",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getActiveFunctionCallsByQueue",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "functionId",
            type: "address",
          },
          {
            internalType: "address",
            name: "caller",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "executed",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "consecutiveFailures",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feePaid",
            type: "uint256",
          },
        ],
        internalType: "struct FunctionCallLib.FunctionCall[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "bool",
        name: "requireEstimatedRunCostFee",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "minimumFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxGasCost",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "requireCallerPayFullCost",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "requireSenderBeReturnAddress",
        type: "bool",
      },
    ],
    name: "setFunctionCallSettings",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "argumentIndex",
        type: "uint256",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedSigner",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedSigner",
        type: "address",
      },
    ],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "oracleIdx",
        type: "uint256",
      },
    ],
    name: "OracleNotAtQueueIdx",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleNotOnQueue",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
    ],
    name: "PermissionDenied",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "OracleAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "OracleGC",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleHeartbeat",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oldSigner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newSigner",
        type: "address",
      },
    ],
    name: "OracleRotateSigner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "OracleSetConfig",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "createOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "createOracleWithId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "oracleIdx",
        type: "uint256",
      },
    ],
    name: "oracleGarbageCollect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "oracleHeartbeat",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "oracles",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "signer",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "numRows",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "lastHeartbeat",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
        ],
        internalType: "struct OracleLib.Oracle",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        internalType: "address",
        name: "newSigner",
        type: "address",
      },
    ],
    name: "rotateOracleSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "setOracleConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "argumentIndex",
        type: "uint256",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "OracleAlreadyExists",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "OracleQueueAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "OracleQueueAddMrEnclave",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "OracleQueueRemoveMrEnclave",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
    ],
    name: "OracleQueueSetAttestationConfig",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
    ],
    name: "OracleQueueSetConfig",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
    ],
    name: "OracleQueueSetPermission",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "addMrEnclaveToOracleQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "bool",
        name: "unpermissionedFeedsEnabled",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "maxSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "oracleTimeout",
        type: "uint256",
      },
    ],
    name: "createOracleQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "oracleId",
        type: "address",
      },
    ],
    name: "getOracleIdx",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getOracleQueueAllowedMrEnclaves",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getOracles",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "oracleQueues",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "oracles",
            type: "address[]",
          },
          {
            internalType: "bool",
            name: "unpermissionedFeedsEnabled",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "maxSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "reward",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "oracleTimeout",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gcIdx",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "currIdx",
            type: "uint256",
          },
        ],
        internalType: "struct OracleQueueLib.OracleQueue",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "queueAttestationConfigs",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "attestationQueueId",
            type: "address",
          },
          {
            internalType: "bytes32[]",
            name: "mrEnclaves",
            type: "bytes32[]",
          },
          {
            internalType: "bool",
            name: "requireValidEnclave",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "requireHeartbeatPermission",
            type: "bool",
          },
        ],
        internalType: "struct OracleQueueLib.AttestationConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
    ],
    name: "removeMrEnclaveFromOracleQueue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
      {
        internalType: "bytes32[]",
        name: "mrEnclaves",
        type: "bytes32[]",
      },
      {
        internalType: "bool",
        name: "requireValidEnclave",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "requireHeartbeatPermission",
        type: "bool",
      },
    ],
    name: "setOracleQueueAttestationConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "bool",
        name: "unpermissionedFeedsEnabled",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "maxSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reward",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "oracleTimeout",
        type: "uint256",
      },
    ],
    name: "setOracleQueueConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "on",
        type: "bool",
      },
    ],
    name: "setOracleQueuePermission",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
    ],
    name: "getPermission",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "granter",
        type: "address",
      },
      {
        internalType: "address",
        name: "grantee",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "permission",
        type: "uint256",
      },
    ],
    name: "hasPermission",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
    ],
    name: "AlreadyExecuted",
    type: "error",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasSpent",
        type: "uint256",
      },
    ],
    name: "ExcessiveGasSpent",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "FunctionAlreadyExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "received",
        type: "address",
      },
    ],
    name: "FunctionIncorrectTarget",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "current",
        type: "address",
      },
      {
        internalType: "address",
        name: "received",
        type: "address",
      },
    ],
    name: "FunctionSignerAlreadySet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "limit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "used",
        type: "uint256",
      },
    ],
    name: "GasLimitExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "maxExpectedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "reportedTime",
        type: "uint256",
      },
    ],
    name: "IncorrectReportedTime",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "receivedBalance",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "argumentIndex",
        type: "uint256",
      },
    ],
    name: "InvalidArgument",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "InvalidEnclave",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedSender",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "txHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedQueueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedQueueId",
        type: "address",
      },
    ],
    name: "QueuesDoNotMatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expirationTime",
        type: "uint256",
      },
    ],
    name: "TransactionExpired",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "FunctionAccountInit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "funder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FunctionFund",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FunctionWithdraw",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "string",
        name: "containerRegistry",
        type: "string",
      },
      {
        internalType: "string",
        name: "container",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "schedule",
        type: "string",
      },
      {
        internalType: "string",
        name: "paramsSchema",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "permittedCallers",
        type: "address[]",
      },
    ],
    name: "createFunction",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "string",
        name: "containerRegistry",
        type: "string",
      },
      {
        internalType: "string",
        name: "container",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "schedule",
        type: "string",
      },
      {
        internalType: "string",
        name: "paramsSchema",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "permittedCallers",
        type: "address[]",
      },
    ],
    name: "createFunctionWithId",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
      {
        internalType: "bytes[]",
        name: "signatures",
        type: "bytes[]",
      },
    ],
    name: "forward",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "accountId",
        type: "address",
      },
    ],
    name: "functionEscrowFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "functionEscrowWithdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "enclaveIdx",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "delegatedSignerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "observedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nextAllowedTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isFailure",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
      {
        internalType: "bytes[]",
        name: "signatures",
        type: "bytes[]",
      },
    ],
    name: "functionVerify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "enclaveIdx",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "address",
        name: "delegatedSignerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "observedTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nextAllowedTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isFailure",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "mrEnclave",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "expirationTimeSeconds",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "to",
            type: "address",
          },
          {
            internalType: "address",
            name: "from",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
        ],
        internalType: "struct TransactionLib.Transaction[]",
        name: "transactions",
        type: "tuple[]",
      },
      {
        internalType: "bytes[]",
        name: "signatures",
        type: "bytes[]",
      },
      {
        internalType: "address[]",
        name: "functionCallIds",
        type: "address[]",
      },
    ],
    name: "functionVerifyRequest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "authority",
        type: "address",
      },
      {
        internalType: "string",
        name: "containerRegistry",
        type: "string",
      },
      {
        internalType: "string",
        name: "container",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "string",
        name: "schedule",
        type: "string",
      },
      {
        internalType: "string",
        name: "paramsSchema",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "permittedCallers",
        type: "address[]",
      },
    ],
    name: "setFunctionConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tolerance",
        type: "uint256",
      },
    ],
    name: "setToleratedTimestampDiscrepancy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "FunctionDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "gasPrice",
        type: "uint256",
      },
    ],
    name: "estimatedRunCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "funcs",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "enclaveId",
            type: "address",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "string",
                name: "schedule",
                type: "string",
              },
              {
                internalType: "address[]",
                name: "permittedCallers",
                type: "address[]",
              },
              {
                internalType: "string",
                name: "containerRegistry",
                type: "string",
              },
              {
                internalType: "string",
                name: "container",
                type: "string",
              },
              {
                internalType: "string",
                name: "version",
                type: "string",
              },
              {
                internalType: "string",
                name: "paramsSchema",
                type: "string",
              },
            ],
            internalType: "struct FunctionLib.FunctionConfig",
            name: "config",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "consecutiveFailures",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nextAllowedTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionGasCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggeredSince",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggerCount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "queueIdx",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "triggered",
                type: "bool",
              },
            ],
            internalType: "struct FunctionLib.FunctionState",
            name: "state",
            type: "tuple",
          },
        ],
        internalType: "struct FunctionLib.SbFunction",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "functionId",
        type: "address",
      },
    ],
    name: "functionExists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getActiveFunctionsByQueue",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "enclaveId",
            type: "address",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "string",
                name: "schedule",
                type: "string",
              },
              {
                internalType: "address[]",
                name: "permittedCallers",
                type: "address[]",
              },
              {
                internalType: "string",
                name: "containerRegistry",
                type: "string",
              },
              {
                internalType: "string",
                name: "container",
                type: "string",
              },
              {
                internalType: "string",
                name: "version",
                type: "string",
              },
              {
                internalType: "string",
                name: "paramsSchema",
                type: "string",
              },
            ],
            internalType: "struct FunctionLib.FunctionConfig",
            name: "config",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "consecutiveFailures",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nextAllowedTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionGasCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggeredSince",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggerCount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "queueIdx",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "triggered",
                type: "bool",
              },
            ],
            internalType: "struct FunctionLib.FunctionState",
            name: "state",
            type: "tuple",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllFunctions",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "enclaveId",
            type: "address",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "string",
                name: "schedule",
                type: "string",
              },
              {
                internalType: "address[]",
                name: "permittedCallers",
                type: "address[]",
              },
              {
                internalType: "string",
                name: "containerRegistry",
                type: "string",
              },
              {
                internalType: "string",
                name: "container",
                type: "string",
              },
              {
                internalType: "string",
                name: "version",
                type: "string",
              },
              {
                internalType: "string",
                name: "paramsSchema",
                type: "string",
              },
            ],
            internalType: "struct FunctionLib.FunctionConfig",
            name: "config",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "consecutiveFailures",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nextAllowedTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionGasCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggeredSince",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggerCount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "queueIdx",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "triggered",
                type: "bool",
              },
            ],
            internalType: "struct FunctionLib.FunctionState",
            name: "state",
            type: "tuple",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getFunctionsByAuthority",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "authority",
            type: "address",
          },
          {
            internalType: "address",
            name: "enclaveId",
            type: "address",
          },
          {
            internalType: "address",
            name: "queueId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
          {
            internalType: "enum FunctionLib.FunctionStatus",
            name: "status",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "string",
                name: "schedule",
                type: "string",
              },
              {
                internalType: "address[]",
                name: "permittedCallers",
                type: "address[]",
              },
              {
                internalType: "string",
                name: "containerRegistry",
                type: "string",
              },
              {
                internalType: "string",
                name: "container",
                type: "string",
              },
              {
                internalType: "string",
                name: "version",
                type: "string",
              },
              {
                internalType: "string",
                name: "paramsSchema",
                type: "string",
              },
            ],
            internalType: "struct FunctionLib.FunctionConfig",
            name: "config",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "consecutiveFailures",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "nextAllowedTimestamp",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "lastExecutionGasCost",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggeredSince",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "triggerCount",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "queueIdx",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "triggered",
                type: "bool",
              },
            ],
            internalType: "struct FunctionLib.FunctionState",
            name: "state",
            type: "tuple",
          },
        ],
        internalType: "struct FunctionLib.SbFunction[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expirationTimeSeconds",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasLimit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "getTransactionHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "ECDSAInvalidSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "length",
        type: "uint256",
      },
    ],
    name: "ECDSAInvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "ECDSAInvalidSignatureS",
    type: "error",
  },
] as const;

export class Switchboard__factory {
  static readonly abi = _abi;
  static createInterface(): SwitchboardInterface {
    return new utils.Interface(_abi) as SwitchboardInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Switchboard {
    return new Contract(address, _abi, signerOrProvider) as Switchboard;
  }
}
