/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace OracleQueueLib {
  export type OracleQueueStruct = {
    name: PromiseOrValue<string>;
    authority: PromiseOrValue<string>;
    oracles: PromiseOrValue<string>[];
    unpermissionedFeedsEnabled: PromiseOrValue<boolean>;
    maxSize: PromiseOrValue<BigNumberish>;
    reward: PromiseOrValue<BigNumberish>;
    oracleTimeout: PromiseOrValue<BigNumberish>;
    gcIdx: PromiseOrValue<BigNumberish>;
    currIdx: PromiseOrValue<BigNumberish>;
  };

  export type OracleQueueStructOutput = [
    string,
    string,
    string[],
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    name: string;
    authority: string;
    oracles: string[];
    unpermissionedFeedsEnabled: boolean;
    maxSize: BigNumber;
    reward: BigNumber;
    oracleTimeout: BigNumber;
    gcIdx: BigNumber;
    currIdx: BigNumber;
  };

  export type AttestationConfigStruct = {
    attestationQueueId: PromiseOrValue<string>;
    mrEnclaves: PromiseOrValue<BytesLike>[];
    requireValidQuote: PromiseOrValue<boolean>;
    requireHeartbeatPermission: PromiseOrValue<boolean>;
  };

  export type AttestationConfigStructOutput = [
    string,
    string[],
    boolean,
    boolean
  ] & {
    attestationQueueId: string;
    mrEnclaves: string[];
    requireValidQuote: boolean;
    requireHeartbeatPermission: boolean;
  };
}

export interface OracleQueueInterface extends utils.Interface {
  functions: {
    "addMrEnclaveToOracleQueue(address,bytes32)": FunctionFragment;
    "createOracleQueue(string,address,bool,uint256,uint256,uint256)": FunctionFragment;
    "getOracleIdx(address)": FunctionFragment;
    "getOracleQueueAllowedMrEnclaves(address)": FunctionFragment;
    "getOracles(address)": FunctionFragment;
    "oracleQueues(address)": FunctionFragment;
    "queueAttestationConfigs(address)": FunctionFragment;
    "removeMrEnclaveFromOracleQueue(address,bytes32)": FunctionFragment;
    "setOracleQueueAttestationConfig(address,address,bytes32[],bool,bool)": FunctionFragment;
    "setOracleQueueConfig(address,string,address,bool,uint256,uint256,uint256)": FunctionFragment;
    "setOracleQueuePermission(address,address,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addMrEnclaveToOracleQueue"
      | "createOracleQueue"
      | "getOracleIdx"
      | "getOracleQueueAllowedMrEnclaves"
      | "getOracles"
      | "oracleQueues"
      | "queueAttestationConfigs"
      | "removeMrEnclaveFromOracleQueue"
      | "setOracleQueueAttestationConfig"
      | "setOracleQueueConfig"
      | "setOracleQueuePermission"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addMrEnclaveToOracleQueue",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createOracleQueue",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleIdx",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracleQueueAllowedMrEnclaves",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOracles",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleQueues",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueAttestationConfigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMrEnclaveFromOracleQueue",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleQueueAttestationConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleQueueConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleQueuePermission",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMrEnclaveToOracleQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOracleQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleIdx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOracleQueueAllowedMrEnclaves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOracles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleQueues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueAttestationConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMrEnclaveFromOracleQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleQueueAttestationConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleQueueConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleQueuePermission",
    data: BytesLike
  ): Result;

  events: {
    "OracleQueueAccountInit(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OracleQueueAccountInit"): EventFragment;
}

export interface OracleQueueAccountInitEventObject {
  authority: string;
  accountAddress: string;
}
export type OracleQueueAccountInitEvent = TypedEvent<
  [string, string],
  OracleQueueAccountInitEventObject
>;

export type OracleQueueAccountInitEventFilter =
  TypedEventFilter<OracleQueueAccountInitEvent>;

export interface OracleQueue extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleQueueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addMrEnclaveToOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOracleQueue(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getOracleIdx(
      oracleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOracleQueueAllowedMrEnclaves(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getOracles(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    oracleQueues(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[OracleQueueLib.OracleQueueStructOutput]>;

    queueAttestationConfigs(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[OracleQueueLib.AttestationConfigStructOutput]>;

    removeMrEnclaveFromOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleQueueAttestationConfig(
      queueId: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      mrEnclaves: PromiseOrValue<BytesLike>[],
      requireValidQuote: PromiseOrValue<boolean>,
      requireHeartbeatPermission: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleQueueConfig(
      queueId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOracleQueuePermission(
      queueId: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addMrEnclaveToOracleQueue(
    queueId: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOracleQueue(
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
    maxSize: PromiseOrValue<BigNumberish>,
    reward: PromiseOrValue<BigNumberish>,
    oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getOracleIdx(
    oracleId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOracleQueueAllowedMrEnclaves(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOracles(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  oracleQueues(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<OracleQueueLib.OracleQueueStructOutput>;

  queueAttestationConfigs(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<OracleQueueLib.AttestationConfigStructOutput>;

  removeMrEnclaveFromOracleQueue(
    queueId: PromiseOrValue<string>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleQueueAttestationConfig(
    queueId: PromiseOrValue<string>,
    attestationQueueId: PromiseOrValue<string>,
    mrEnclaves: PromiseOrValue<BytesLike>[],
    requireValidQuote: PromiseOrValue<boolean>,
    requireHeartbeatPermission: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleQueueConfig(
    queueId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
    maxSize: PromiseOrValue<BigNumberish>,
    reward: PromiseOrValue<BigNumberish>,
    oracleTimeout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOracleQueuePermission(
    queueId: PromiseOrValue<string>,
    grantee: PromiseOrValue<string>,
    permission: PromiseOrValue<BigNumberish>,
    on: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMrEnclaveToOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOracleQueue(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getOracleIdx(
      oracleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleQueueAllowedMrEnclaves(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOracles(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    oracleQueues(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<OracleQueueLib.OracleQueueStructOutput>;

    queueAttestationConfigs(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<OracleQueueLib.AttestationConfigStructOutput>;

    removeMrEnclaveFromOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleQueueAttestationConfig(
      queueId: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      mrEnclaves: PromiseOrValue<BytesLike>[],
      requireValidQuote: PromiseOrValue<boolean>,
      requireHeartbeatPermission: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleQueueConfig(
      queueId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleQueuePermission(
      queueId: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OracleQueueAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
    OracleQueueAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountAddress?: PromiseOrValue<string> | null
    ): OracleQueueAccountInitEventFilter;
  };

  estimateGas: {
    addMrEnclaveToOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOracleQueue(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getOracleIdx(
      oracleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracleQueueAllowedMrEnclaves(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOracles(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleQueues(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueAttestationConfigs(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMrEnclaveFromOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleQueueAttestationConfig(
      queueId: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      mrEnclaves: PromiseOrValue<BytesLike>[],
      requireValidQuote: PromiseOrValue<boolean>,
      requireHeartbeatPermission: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleQueueConfig(
      queueId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOracleQueuePermission(
      queueId: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMrEnclaveToOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOracleQueue(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getOracleIdx(
      oracleId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracleQueueAllowedMrEnclaves(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOracles(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleQueues(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueAttestationConfigs(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeMrEnclaveFromOracleQueue(
      queueId: PromiseOrValue<string>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleQueueAttestationConfig(
      queueId: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      mrEnclaves: PromiseOrValue<BytesLike>[],
      requireValidQuote: PromiseOrValue<boolean>,
      requireHeartbeatPermission: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleQueueConfig(
      queueId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      unpermissionedFeedsEnabled: PromiseOrValue<boolean>,
      maxSize: PromiseOrValue<BigNumberish>,
      reward: PromiseOrValue<BigNumberish>,
      oracleTimeout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOracleQueuePermission(
      queueId: PromiseOrValue<string>,
      grantee: PromiseOrValue<string>,
      permission: PromiseOrValue<BigNumberish>,
      on: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
