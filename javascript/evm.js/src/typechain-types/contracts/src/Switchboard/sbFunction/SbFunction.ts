/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace TransactionLib {
  export type TransactionStruct = {
    expirationTimeSeconds: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type TransactionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    expirationTimeSeconds: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    to: string;
    from: string;
    data: string;
  };
}

export interface SbFunctionInterface extends utils.Interface {
  functions: {
    "createFunction(string,address,address,string,string,string,string,string,address[])": FunctionFragment;
    "createFunctionWithId(address,string,address,address,string,string,string,string,string,address[])": FunctionFragment;
    "forward((uint256,uint256,uint256,address,address,bytes)[],bytes[])": FunctionFragment;
    "functionEscrowFund(address)": FunctionFragment;
    "functionEscrowWithdraw(address,address,uint256)": FunctionFragment;
    "functionVerify(uint256,address,address,uint256,uint256,bool,bytes32,(uint256,uint256,uint256,address,address,bytes)[],bytes[])": FunctionFragment;
    "functionVerifyRequest(uint256,address,address,uint256,uint256,bool,bytes32,(uint256,uint256,uint256,address,address,bytes)[],bytes[],address[])": FunctionFragment;
    "setFunctionConfig(address,string,address,string,string,string,string,string,address[])": FunctionFragment;
    "setToleratedTimestampDiscrepancy(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createFunction"
      | "createFunctionWithId"
      | "forward"
      | "functionEscrowFund"
      | "functionEscrowWithdraw"
      | "functionVerify"
      | "functionVerifyRequest"
      | "setFunctionConfig"
      | "setToleratedTimestampDiscrepancy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFunction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createFunctionWithId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forward",
    values: [TransactionLib.TransactionStruct[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "functionEscrowFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionEscrowWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "functionVerify",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      TransactionLib.TransactionStruct[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "functionVerifyRequest",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      TransactionLib.TransactionStruct[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunctionConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setToleratedTimestampDiscrepancy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFunctionWithId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "functionEscrowFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionEscrowWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionVerifyRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFunctionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setToleratedTimestampDiscrepancy",
    data: BytesLike
  ): Result;

  events: {
    "FunctionAccountInit(address,address)": EventFragment;
    "FunctionFund(address,address,uint256)": EventFragment;
    "FunctionWithdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FunctionAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionWithdraw"): EventFragment;
}

export interface FunctionAccountInitEventObject {
  authority: string;
  accountId: string;
}
export type FunctionAccountInitEvent = TypedEvent<
  [string, string],
  FunctionAccountInitEventObject
>;

export type FunctionAccountInitEventFilter =
  TypedEventFilter<FunctionAccountInitEvent>;

export interface FunctionFundEventObject {
  functionId: string;
  funder: string;
  amount: BigNumber;
}
export type FunctionFundEvent = TypedEvent<
  [string, string, BigNumber],
  FunctionFundEventObject
>;

export type FunctionFundEventFilter = TypedEventFilter<FunctionFundEvent>;

export interface FunctionWithdrawEventObject {
  functionId: string;
  withdrawer: string;
  amount: BigNumber;
}
export type FunctionWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  FunctionWithdrawEventObject
>;

export type FunctionWithdrawEventFilter =
  TypedEventFilter<FunctionWithdrawEvent>;

export interface SbFunction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SbFunctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFunctionWithId(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionVerify(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionVerifyRequest(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      functionCallIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToleratedTimestampDiscrepancy(
      tolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createFunction(
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    containerRegistry: PromiseOrValue<string>,
    container: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    schedule: PromiseOrValue<string>,
    paramsSchema: PromiseOrValue<string>,
    permittedCallers: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFunctionWithId(
    functionId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    containerRegistry: PromiseOrValue<string>,
    container: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    schedule: PromiseOrValue<string>,
    paramsSchema: PromiseOrValue<string>,
    permittedCallers: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forward(
    transactions: TransactionLib.TransactionStruct[],
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionEscrowFund(
    accountId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionEscrowWithdraw(
    recipient: PromiseOrValue<string>,
    functionId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionVerify(
    enclaveIdx: PromiseOrValue<BigNumberish>,
    functionId: PromiseOrValue<string>,
    delegatedSignerAddress: PromiseOrValue<string>,
    observedTime: PromiseOrValue<BigNumberish>,
    nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
    isFailure: PromiseOrValue<boolean>,
    mrEnclave: PromiseOrValue<BytesLike>,
    transactions: TransactionLib.TransactionStruct[],
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionVerifyRequest(
    enclaveIdx: PromiseOrValue<BigNumberish>,
    functionId: PromiseOrValue<string>,
    delegatedSignerAddress: PromiseOrValue<string>,
    observedTime: PromiseOrValue<BigNumberish>,
    nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
    isFailure: PromiseOrValue<boolean>,
    mrEnclave: PromiseOrValue<BytesLike>,
    transactions: TransactionLib.TransactionStruct[],
    signatures: PromiseOrValue<BytesLike>[],
    functionCallIds: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFunctionConfig(
    functionId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    containerRegistry: PromiseOrValue<string>,
    container: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    schedule: PromiseOrValue<string>,
    paramsSchema: PromiseOrValue<string>,
    permittedCallers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToleratedTimestampDiscrepancy(
    tolerance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createFunctionWithId(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    functionVerify(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    functionVerifyRequest(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      functionCallIds: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setToleratedTimestampDiscrepancy(
      tolerance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FunctionAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null
    ): FunctionAccountInitEventFilter;
    FunctionAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null
    ): FunctionAccountInitEventFilter;

    "FunctionFund(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionFundEventFilter;
    FunctionFund(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionFundEventFilter;

    "FunctionWithdraw(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      withdrawer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionWithdrawEventFilter;
    FunctionWithdraw(
      functionId?: PromiseOrValue<string> | null,
      withdrawer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionWithdrawEventFilter;
  };

  estimateGas: {
    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFunctionWithId(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionVerify(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionVerifyRequest(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      functionCallIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToleratedTimestampDiscrepancy(
      tolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFunctionWithId(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionVerify(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionVerifyRequest(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      functionCallIds: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToleratedTimestampDiscrepancy(
      tolerance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
