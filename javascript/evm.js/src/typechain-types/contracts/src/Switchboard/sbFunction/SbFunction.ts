/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace TransactionLib {
  export type TransactionStruct = {
    expirationTimeSeconds: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type TransactionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    expirationTimeSeconds: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    to: string;
    from: string;
    data: string;
  };
}

export declare namespace FunctionLib {
  export type FunctionConfigStruct = {
    schedule: PromiseOrValue<string>;
    permittedCallers: PromiseOrValue<string>[];
    containerRegistry: PromiseOrValue<string>;
    container: PromiseOrValue<string>;
    version: PromiseOrValue<BytesLike>;
    paramsSchema: PromiseOrValue<string>;
  };

  export type FunctionConfigStructOutput = [
    string,
    string[],
    string,
    string,
    string,
    string
  ] & {
    schedule: string;
    permittedCallers: string[];
    containerRegistry: string;
    container: string;
    version: string;
    paramsSchema: string;
  };

  export type FunctionStateStruct = {
    consecutiveFailures: PromiseOrValue<BigNumberish>;
    lastExecutionTimestamp: PromiseOrValue<BigNumberish>;
    nextAllowedTimestamp: PromiseOrValue<BigNumberish>;
    callId: PromiseOrValue<BigNumberish>;
    triggeredSince: PromiseOrValue<BigNumberish>;
    triggerCount: PromiseOrValue<BigNumberish>;
    queueIdx: PromiseOrValue<BigNumberish>;
    triggered: PromiseOrValue<boolean>;
  };

  export type FunctionStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    consecutiveFailures: BigNumber;
    lastExecutionTimestamp: BigNumber;
    nextAllowedTimestamp: BigNumber;
    callId: BigNumber;
    triggeredSince: BigNumber;
    triggerCount: BigNumber;
    queueIdx: BigNumber;
    triggered: boolean;
  };

  export type SbFunctionStruct = {
    name: PromiseOrValue<string>;
    authority: PromiseOrValue<string>;
    enclaveId: PromiseOrValue<string>;
    queueId: PromiseOrValue<string>;
    balance: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    config: FunctionLib.FunctionConfigStruct;
    state: FunctionLib.FunctionStateStruct;
  };

  export type SbFunctionStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    FunctionLib.FunctionConfigStructOutput,
    FunctionLib.FunctionStateStructOutput
  ] & {
    name: string;
    authority: string;
    enclaveId: string;
    queueId: string;
    balance: BigNumber;
    status: number;
    config: FunctionLib.FunctionConfigStructOutput;
    state: FunctionLib.FunctionStateStructOutput;
  };

  export type FunctionCallStruct = {
    caller: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    callData: PromiseOrValue<BytesLike>;
    executed: PromiseOrValue<boolean>;
  };

  export type FunctionCallStructOutput = [
    string,
    BigNumber,
    string,
    boolean
  ] & {
    caller: string;
    timestamp: BigNumber;
    callData: string;
    executed: boolean;
  };
}

export interface SbFunctionInterface extends utils.Interface {
  functions: {
    "callFunction(address,bytes)": FunctionFragment;
    "createFunction(string,address,address,string,string,bytes32,string,string,address[])": FunctionFragment;
    "forward((uint256,uint256,uint256,address,address,bytes)[],bytes[])": FunctionFragment;
    "funcs(address)": FunctionFragment;
    "functionEscrowFund(address)": FunctionFragment;
    "functionEscrowWithdraw(address,address,uint256)": FunctionFragment;
    "functionExists(address)": FunctionFragment;
    "getActiveFunctionsByQueue(address)": FunctionFragment;
    "getAllFunctions()": FunctionFragment;
    "getAllUnexecutedFunctionCalls(address)": FunctionFragment;
    "getFunctionsByAuthority(address)": FunctionFragment;
    "getTransactionHash(uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "setFunctionConfig(address,string,address,string,string,bytes32,string,string,address[])": FunctionFragment;
    "verifyFunction(uint256,address,address,uint256,uint256,bool,bytes32,(uint256,uint256,uint256,address,address,bytes)[],bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "callFunction"
      | "createFunction"
      | "forward"
      | "funcs"
      | "functionEscrowFund"
      | "functionEscrowWithdraw"
      | "functionExists"
      | "getActiveFunctionsByQueue"
      | "getAllFunctions"
      | "getAllUnexecutedFunctionCalls"
      | "getFunctionsByAuthority"
      | "getTransactionHash"
      | "isTrustedForwarder"
      | "setFunctionConfig"
      | "verifyFunction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "callFunction",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createFunction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forward",
    values: [TransactionLib.TransactionStruct[], PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "funcs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionEscrowFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "functionEscrowWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "functionExists",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveFunctionsByQueue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFunctions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUnexecutedFunctionCalls",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFunctionsByAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFunctionConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFunction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      TransactionLib.TransactionStruct[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "callFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "funcs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "functionEscrowFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionEscrowWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "functionExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveFunctionsByQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllFunctions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUnexecutedFunctionCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFunctionsByAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFunctionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFunction",
    data: BytesLike
  ): Result;

  events: {
    "FunctionAccountInit(address,address)": EventFragment;
    "FunctionCall(address,address,uint256,bytes)": EventFragment;
    "FunctionFund(address,address,uint256)": EventFragment;
    "FunctionWithdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FunctionAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FunctionWithdraw"): EventFragment;
}

export interface FunctionAccountInitEventObject {
  authority: string;
  accountId: string;
}
export type FunctionAccountInitEvent = TypedEvent<
  [string, string],
  FunctionAccountInitEventObject
>;

export type FunctionAccountInitEventFilter =
  TypedEventFilter<FunctionAccountInitEvent>;

export interface FunctionCallEventObject {
  functionId: string;
  sender: string;
  callId: BigNumber;
  params: string;
}
export type FunctionCallEvent = TypedEvent<
  [string, string, BigNumber, string],
  FunctionCallEventObject
>;

export type FunctionCallEventFilter = TypedEventFilter<FunctionCallEvent>;

export interface FunctionFundEventObject {
  functionId: string;
  funder: string;
  amount: BigNumber;
}
export type FunctionFundEvent = TypedEvent<
  [string, string, BigNumber],
  FunctionFundEventObject
>;

export type FunctionFundEventFilter = TypedEventFilter<FunctionFundEvent>;

export interface FunctionWithdrawEventObject {
  functionId: string;
  withdrawer: string;
  amount: BigNumber;
}
export type FunctionWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  FunctionWithdrawEventObject
>;

export type FunctionWithdrawEventFilter =
  TypedEventFilter<FunctionWithdrawEvent>;

export interface SbFunction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SbFunctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    callFunction(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    funcs(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FunctionLib.SbFunctionStructOutput]>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    functionExists(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getActiveFunctionsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

    getAllFunctions(
      overrides?: CallOverrides
    ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

    getAllUnexecutedFunctionCalls(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[FunctionLib.FunctionCallStructOutput[]]>;

    getFunctionsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

    getTransactionHash(
      expirationTimeSeconds: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isTrustedForwarder(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyFunction(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  callFunction(
    functionId: PromiseOrValue<string>,
    params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createFunction(
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    containerRegistry: PromiseOrValue<string>,
    container: PromiseOrValue<string>,
    version: PromiseOrValue<BytesLike>,
    schedule: PromiseOrValue<string>,
    paramsSchema: PromiseOrValue<string>,
    permittedCallers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forward(
    transactions: TransactionLib.TransactionStruct[],
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  funcs(
    functionId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FunctionLib.SbFunctionStructOutput>;

  functionEscrowFund(
    accountId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionEscrowWithdraw(
    recipient: PromiseOrValue<string>,
    functionId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  functionExists(
    functionId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getActiveFunctionsByQueue(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

  getAllFunctions(
    overrides?: CallOverrides
  ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

  getAllUnexecutedFunctionCalls(
    functionId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<FunctionLib.FunctionCallStructOutput[]>;

  getFunctionsByAuthority(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

  getTransactionHash(
    expirationTimeSeconds: PromiseOrValue<BigNumberish>,
    gasLimit: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isTrustedForwarder(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setFunctionConfig(
    functionId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    containerRegistry: PromiseOrValue<string>,
    container: PromiseOrValue<string>,
    version: PromiseOrValue<BytesLike>,
    schedule: PromiseOrValue<string>,
    paramsSchema: PromiseOrValue<string>,
    permittedCallers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyFunction(
    enclaveIdx: PromiseOrValue<BigNumberish>,
    functionId: PromiseOrValue<string>,
    delegatedSignerAddress: PromiseOrValue<string>,
    observedTime: PromiseOrValue<BigNumberish>,
    nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
    isFailure: PromiseOrValue<boolean>,
    mrEnclave: PromiseOrValue<BytesLike>,
    transactions: TransactionLib.TransactionStruct[],
    signatures: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    callFunction(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    funcs(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FunctionLib.SbFunctionStructOutput>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    functionExists(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActiveFunctionsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

    getAllFunctions(
      overrides?: CallOverrides
    ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

    getAllUnexecutedFunctionCalls(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<FunctionLib.FunctionCallStructOutput[]>;

    getFunctionsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], FunctionLib.SbFunctionStructOutput[]]>;

    getTransactionHash(
      expirationTimeSeconds: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isTrustedForwarder(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyFunction(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FunctionAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null
    ): FunctionAccountInitEventFilter;
    FunctionAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null
    ): FunctionAccountInitEventFilter;

    "FunctionCall(address,address,uint256,bytes)"(
      functionId?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      callId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): FunctionCallEventFilter;
    FunctionCall(
      functionId?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      callId?: PromiseOrValue<BigNumberish> | null,
      params?: null
    ): FunctionCallEventFilter;

    "FunctionFund(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionFundEventFilter;
    FunctionFund(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionFundEventFilter;

    "FunctionWithdraw(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      withdrawer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionWithdrawEventFilter;
    FunctionWithdraw(
      functionId?: PromiseOrValue<string> | null,
      withdrawer?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): FunctionWithdrawEventFilter;
  };

  estimateGas: {
    callFunction(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    funcs(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    functionExists(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveFunctionsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllFunctions(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUnexecutedFunctionCalls(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFunctionsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionHash(
      expirationTimeSeconds: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyFunction(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    callFunction(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createFunction(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forward(
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    funcs(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    functionEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    functionExists(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveFunctionsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllFunctions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUnexecutedFunctionCalls(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFunctionsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      expirationTimeSeconds: PromiseOrValue<BigNumberish>,
      gasLimit: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFunctionConfig(
      functionId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      containerRegistry: PromiseOrValue<string>,
      container: PromiseOrValue<string>,
      version: PromiseOrValue<BytesLike>,
      schedule: PromiseOrValue<string>,
      paramsSchema: PromiseOrValue<string>,
      permittedCallers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyFunction(
      enclaveIdx: PromiseOrValue<BigNumberish>,
      functionId: PromiseOrValue<string>,
      delegatedSignerAddress: PromiseOrValue<string>,
      observedTime: PromiseOrValue<BigNumberish>,
      nextAllowedTimestamp: PromiseOrValue<BigNumberish>,
      isFailure: PromiseOrValue<boolean>,
      mrEnclave: PromiseOrValue<BytesLike>,
      transactions: TransactionLib.TransactionStruct[],
      signatures: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
