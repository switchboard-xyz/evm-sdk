/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace AggregatorLib {
  export type AggregatorHistoryResultStruct = {
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    medianTimestamp: PromiseOrValue<BigNumberish>;
  };

  export type AggregatorHistoryResultStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { value: BigNumber; timestamp: BigNumber; medianTimestamp: BigNumber };

  export type ResultStruct = {
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
    oracleId: PromiseOrValue<string>;
  };

  export type ResultStructOutput = [BigNumber, BigNumber, string] & {
    value: BigNumber;
    timestamp: BigNumber;
    oracleId: string;
  };

  export type AggregatorConfigStruct = {
    batchSize: PromiseOrValue<BigNumberish>;
    minUpdateDelaySeconds: PromiseOrValue<BigNumberish>;
    minOracleResults: PromiseOrValue<BigNumberish>;
    varianceThreshold: PromiseOrValue<BigNumberish>;
    minJobResults: PromiseOrValue<BigNumberish>;
    forceReportPeriod: PromiseOrValue<BigNumberish>;
  };

  export type AggregatorConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    batchSize: BigNumber;
    minUpdateDelaySeconds: BigNumber;
    minOracleResults: BigNumber;
    varianceThreshold: BigNumber;
    minJobResults: BigNumber;
    forceReportPeriod: BigNumber;
  };

  export type AggregatorStruct = {
    name: PromiseOrValue<string>;
    authority: PromiseOrValue<string>;
    latestResult: AggregatorLib.ResultStruct;
    config: AggregatorLib.AggregatorConfigStruct;
    jobsHash: PromiseOrValue<string>;
    queueId: PromiseOrValue<string>;
    balanceLeftForInterval: PromiseOrValue<BigNumberish>;
    nextIntervalRefreshTime: PromiseOrValue<BigNumberish>;
    intervalId: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    historyEnabled: PromiseOrValue<boolean>;
  };

  export type AggregatorStructOutput = [
    string,
    string,
    AggregatorLib.ResultStructOutput,
    AggregatorLib.AggregatorConfigStructOutput,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    name: string;
    authority: string;
    latestResult: AggregatorLib.ResultStructOutput;
    config: AggregatorLib.AggregatorConfigStructOutput;
    jobsHash: string;
    queueId: string;
    balanceLeftForInterval: BigNumber;
    nextIntervalRefreshTime: BigNumber;
    intervalId: BigNumber;
    balance: BigNumber;
    historyEnabled: boolean;
  };
}

export interface AggregatorInterface extends utils.Interface {
  functions: {
    "aggregatorEscrowFund(address)": FunctionFragment;
    "aggregatorEscrowWithdraw(address,address,uint256)": FunctionFragment;
    "aggregatorHistory(address,uint80)": FunctionFragment;
    "aggregators(address)": FunctionFragment;
    "createAggregator(string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "getAggregatorsByAuthority(address)": FunctionFragment;
    "getAllAggregators()": FunctionFragment;
    "getCurrentIntervalId(address)": FunctionFragment;
    "getIntervalResult(address,uint80)": FunctionFragment;
    "latestResult(address)": FunctionFragment;
    "openInterval(address)": FunctionFragment;
    "saveResults(address[],int256[],address,uint256)": FunctionFragment;
    "setAggregatorConfig(address,string,address,uint256,uint256,uint256,string,address,uint256,uint256,uint256,bool)": FunctionFragment;
    "viewAggregatorResults(address)": FunctionFragment;
    "viewLatestResult(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "aggregatorEscrowFund"
      | "aggregatorEscrowWithdraw"
      | "aggregatorHistory"
      | "aggregators"
      | "createAggregator"
      | "getAggregatorsByAuthority"
      | "getAllAggregators"
      | "getCurrentIntervalId"
      | "getIntervalResult"
      | "latestResult"
      | "openInterval"
      | "saveResults"
      | "setAggregatorConfig"
      | "viewAggregatorResults"
      | "viewLatestResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "aggregatorEscrowFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorEscrowWithdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorHistory",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "aggregators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAggregator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAggregatorsByAuthority",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAggregators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentIntervalId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIntervalResult",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "latestResult",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "openInterval",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "saveResults",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregatorConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "viewAggregatorResults",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewLatestResult",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "aggregatorEscrowFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorEscrowWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAggregatorsByAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentIntervalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIntervalResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saveResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAggregatorConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAggregatorResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewLatestResult",
    data: BytesLike
  ): Result;

  events: {
    "AggregatorAccountInit(address,address,uint256)": EventFragment;
    "AggregatorFundEvent(address,address,uint256)": EventFragment;
    "AggregatorIntervalRefreshed(address,uint256,uint256)": EventFragment;
    "AggregatorOpenInterval(address,uint256)": EventFragment;
    "AggregatorRead(address,address,int256)": EventFragment;
    "AggregatorSaveResult(address,address,int256)": EventFragment;
    "AggregatorSettingsUpdated(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "AggregatorUpdate(address,int256,uint256)": EventFragment;
    "AggregatorWithdrawEvent(address,address,uint256)": EventFragment;
    "OraclePayoutEvent(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AggregatorAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorFundEvent"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AggregatorIntervalRefreshed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorOpenInterval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorRead"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorSaveResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AggregatorWithdrawEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePayoutEvent"): EventFragment;
}

export interface AggregatorAccountInitEventObject {
  authority: string;
  accountId: string;
  timestamp: BigNumber;
}
export type AggregatorAccountInitEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorAccountInitEventObject
>;

export type AggregatorAccountInitEventFilter =
  TypedEventFilter<AggregatorAccountInitEvent>;

export interface AggregatorFundEventEventObject {
  aggregatorId: string;
  funder: string;
  amount: BigNumber;
}
export type AggregatorFundEventEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorFundEventEventObject
>;

export type AggregatorFundEventEventFilter =
  TypedEventFilter<AggregatorFundEventEvent>;

export interface AggregatorIntervalRefreshedEventObject {
  aggregatorId: string;
  intervalId: BigNumber;
  balanceLeftForInterval: BigNumber;
}
export type AggregatorIntervalRefreshedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorIntervalRefreshedEventObject
>;

export type AggregatorIntervalRefreshedEventFilter =
  TypedEventFilter<AggregatorIntervalRefreshedEvent>;

export interface AggregatorOpenIntervalEventObject {
  aggregatorId: string;
  intervalId: BigNumber;
}
export type AggregatorOpenIntervalEvent = TypedEvent<
  [string, BigNumber],
  AggregatorOpenIntervalEventObject
>;

export type AggregatorOpenIntervalEventFilter =
  TypedEventFilter<AggregatorOpenIntervalEvent>;

export interface AggregatorReadEventObject {
  aggregatorId: string;
  reader: string;
  value: BigNumber;
}
export type AggregatorReadEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorReadEventObject
>;

export type AggregatorReadEventFilter = TypedEventFilter<AggregatorReadEvent>;

export interface AggregatorSaveResultEventObject {
  aggregatorId: string;
  oracle: string;
  value: BigNumber;
}
export type AggregatorSaveResultEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorSaveResultEventObject
>;

export type AggregatorSaveResultEventFilter =
  TypedEventFilter<AggregatorSaveResultEvent>;

export interface AggregatorSettingsUpdatedEventObject {
  aggregatorId: string;
  minUpdateDelaySeconds: BigNumber;
  minOracleResults: BigNumber;
  varianceThreshold: BigNumber;
  minJobResults: BigNumber;
  forceReportPeriod: BigNumber;
}
export type AggregatorSettingsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  AggregatorSettingsUpdatedEventObject
>;

export type AggregatorSettingsUpdatedEventFilter =
  TypedEventFilter<AggregatorSettingsUpdatedEvent>;

export interface AggregatorUpdateEventObject {
  aggregatorId: string;
  value: BigNumber;
  timestamp: BigNumber;
}
export type AggregatorUpdateEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AggregatorUpdateEventObject
>;

export type AggregatorUpdateEventFilter =
  TypedEventFilter<AggregatorUpdateEvent>;

export interface AggregatorWithdrawEventEventObject {
  aggregatorId: string;
  funder: string;
  amount: BigNumber;
}
export type AggregatorWithdrawEventEvent = TypedEvent<
  [string, string, BigNumber],
  AggregatorWithdrawEventEventObject
>;

export type AggregatorWithdrawEventEventFilter =
  TypedEventFilter<AggregatorWithdrawEventEvent>;

export interface OraclePayoutEventEventObject {
  oracleId: string;
  aggregatorId: string;
  amount: BigNumber;
}
export type OraclePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  OraclePayoutEventEventObject
>;

export type OraclePayoutEventEventFilter =
  TypedEventFilter<OraclePayoutEventEvent>;

export interface Aggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aggregatorEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregatorEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    aggregatorHistory(
      aggregatorId: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[AggregatorLib.AggregatorHistoryResultStructOutput]>;

    aggregators(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AggregatorLib.AggregatorStructOutput]>;

    createAggregator(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], AggregatorLib.AggregatorStructOutput[]]>;

    getAllAggregators(
      overrides?: CallOverrides
    ): Promise<[string[], AggregatorLib.AggregatorStructOutput[]]>;

    getCurrentIntervalId(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { roundId: BigNumber }>;

    getIntervalResult(
      aggregatorId: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openInterval(
      aggregatorId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    saveResults(
      ids: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueId: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAggregatorConfig(
      aggregatorId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewAggregatorResults(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[AggregatorLib.ResultStructOutput[]]>;

    viewLatestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;
  };

  aggregatorEscrowFund(
    accountId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregatorEscrowWithdraw(
    recipient: PromiseOrValue<string>,
    aggregatorId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  aggregatorHistory(
    aggregatorId: PromiseOrValue<string>,
    roundId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<AggregatorLib.AggregatorHistoryResultStructOutput>;

  aggregators(
    aggregatorId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AggregatorLib.AggregatorStructOutput>;

  createAggregator(
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    batchSize: PromiseOrValue<BigNumberish>,
    minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
    minOracleResults: PromiseOrValue<BigNumberish>,
    jobsHash: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    varianceThreshold: PromiseOrValue<BigNumberish>,
    minJobResults: PromiseOrValue<BigNumberish>,
    forceReportPeriod: PromiseOrValue<BigNumberish>,
    enableHistory: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAggregatorsByAuthority(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], AggregatorLib.AggregatorStructOutput[]]>;

  getAllAggregators(
    overrides?: CallOverrides
  ): Promise<[string[], AggregatorLib.AggregatorStructOutput[]]>;

  getCurrentIntervalId(
    aggregatorId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIntervalResult(
    aggregatorId: PromiseOrValue<string>,
    intervalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestResult(
    aggregatorId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openInterval(
    aggregatorId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  saveResults(
    ids: PromiseOrValue<string>[],
    results: PromiseOrValue<BigNumberish>[],
    queueId: PromiseOrValue<string>,
    oracleIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAggregatorConfig(
    aggregatorId: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    batchSize: PromiseOrValue<BigNumberish>,
    minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
    minOracleResults: PromiseOrValue<BigNumberish>,
    jobsHash: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    varianceThreshold: PromiseOrValue<BigNumberish>,
    minJobResults: PromiseOrValue<BigNumberish>,
    forceReportPeriod: PromiseOrValue<BigNumberish>,
    enableHistory: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewAggregatorResults(
    aggregatorId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<AggregatorLib.ResultStructOutput[]>;

  viewLatestResult(
    aggregatorId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
  >;

  callStatic: {
    aggregatorEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    aggregatorEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    aggregatorHistory(
      aggregatorId: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<AggregatorLib.AggregatorHistoryResultStructOutput>;

    aggregators(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AggregatorLib.AggregatorStructOutput>;

    createAggregator(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], AggregatorLib.AggregatorStructOutput[]]>;

    getAllAggregators(
      overrides?: CallOverrides
    ): Promise<[string[], AggregatorLib.AggregatorStructOutput[]]>;

    getCurrentIntervalId(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntervalResult(
      aggregatorId: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        value: BigNumber;
        timestamp: BigNumber;
        medianTimestamp: BigNumber;
      }
    >;

    latestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;

    openInterval(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    saveResults(
      ids: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueId: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAggregatorConfig(
      aggregatorId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewAggregatorResults(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<AggregatorLib.ResultStructOutput[]>;

    viewLatestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { value: BigNumber; timestamp: BigNumber }
    >;
  };

  filters: {
    "AggregatorAccountInit(address,address,uint256)"(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;
    AggregatorAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null,
      timestamp?: null
    ): AggregatorAccountInitEventFilter;

    "AggregatorFundEvent(address,address,uint256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;
    AggregatorFundEvent(
      aggregatorId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorFundEventEventFilter;

    "AggregatorIntervalRefreshed(address,uint256,uint256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null,
      balanceLeftForInterval?: PromiseOrValue<BigNumberish> | null
    ): AggregatorIntervalRefreshedEventFilter;
    AggregatorIntervalRefreshed(
      aggregatorId?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null,
      balanceLeftForInterval?: PromiseOrValue<BigNumberish> | null
    ): AggregatorIntervalRefreshedEventFilter;

    "AggregatorOpenInterval(address,uint256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null
    ): AggregatorOpenIntervalEventFilter;
    AggregatorOpenInterval(
      aggregatorId?: PromiseOrValue<string> | null,
      intervalId?: PromiseOrValue<BigNumberish> | null
    ): AggregatorOpenIntervalEventFilter;

    "AggregatorRead(address,address,int256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      reader?: PromiseOrValue<string> | null,
      value?: null
    ): AggregatorReadEventFilter;
    AggregatorRead(
      aggregatorId?: PromiseOrValue<string> | null,
      reader?: PromiseOrValue<string> | null,
      value?: null
    ): AggregatorReadEventFilter;

    "AggregatorSaveResult(address,address,int256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;
    AggregatorSaveResult(
      aggregatorId?: PromiseOrValue<string> | null,
      oracle?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null
    ): AggregatorSaveResultEventFilter;

    "AggregatorSettingsUpdated(address,uint256,uint256,uint256,uint256,uint256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      minUpdateDelaySeconds?: null,
      minOracleResults?: null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorSettingsUpdatedEventFilter;
    AggregatorSettingsUpdated(
      aggregatorId?: PromiseOrValue<string> | null,
      minUpdateDelaySeconds?: null,
      minOracleResults?: null,
      varianceThreshold?: null,
      minJobResults?: null,
      forceReportPeriod?: null
    ): AggregatorSettingsUpdatedEventFilter;

    "AggregatorUpdate(address,int256,uint256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;
    AggregatorUpdate(
      aggregatorId?: PromiseOrValue<string> | null,
      value?: PromiseOrValue<BigNumberish> | null,
      timestamp?: null
    ): AggregatorUpdateEventFilter;

    "AggregatorWithdrawEvent(address,address,uint256)"(
      aggregatorId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorWithdrawEventEventFilter;
    AggregatorWithdrawEvent(
      aggregatorId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): AggregatorWithdrawEventEventFilter;

    "OraclePayoutEvent(address,address,uint256)"(
      oracleId?: PromiseOrValue<string> | null,
      aggregatorId?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;
    OraclePayoutEvent(
      oracleId?: PromiseOrValue<string> | null,
      aggregatorId?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): OraclePayoutEventEventFilter;
  };

  estimateGas: {
    aggregatorEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregatorEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    aggregatorHistory(
      aggregatorId: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    aggregators(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAggregator(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllAggregators(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentIntervalId(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIntervalResult(
      aggregatorId: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openInterval(
      aggregatorId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    saveResults(
      ids: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueId: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAggregatorConfig(
      aggregatorId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewAggregatorResults(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewLatestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    aggregatorEscrowFund(
      accountId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregatorEscrowWithdraw(
      recipient: PromiseOrValue<string>,
      aggregatorId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    aggregatorHistory(
      aggregatorId: PromiseOrValue<string>,
      roundId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregators(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAggregator(
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAggregatorsByAuthority(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllAggregators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentIntervalId(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIntervalResult(
      aggregatorId: PromiseOrValue<string>,
      intervalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openInterval(
      aggregatorId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    saveResults(
      ids: PromiseOrValue<string>[],
      results: PromiseOrValue<BigNumberish>[],
      queueId: PromiseOrValue<string>,
      oracleIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAggregatorConfig(
      aggregatorId: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      batchSize: PromiseOrValue<BigNumberish>,
      minUpdateDelaySeconds: PromiseOrValue<BigNumberish>,
      minOracleResults: PromiseOrValue<BigNumberish>,
      jobsHash: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      varianceThreshold: PromiseOrValue<BigNumberish>,
      minJobResults: PromiseOrValue<BigNumberish>,
      forceReportPeriod: PromiseOrValue<BigNumberish>,
      enableHistory: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewAggregatorResults(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewLatestResult(
      aggregatorId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
