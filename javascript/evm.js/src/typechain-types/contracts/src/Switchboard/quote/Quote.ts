/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace QuoteLib {
  export type QuoteStruct = {
    authority: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    queueId: PromiseOrValue<string>;
    quoteBuffer: PromiseOrValue<BytesLike>;
    verificationStatus: PromiseOrValue<BigNumberish>;
    verificationTimestamp: PromiseOrValue<BigNumberish>;
    validUntil: PromiseOrValue<BigNumberish>;
    mrEnclave: PromiseOrValue<BytesLike>;
    isOnQueue: PromiseOrValue<boolean>;
    lastHeartbeat: PromiseOrValue<BigNumberish>;
  };

  export type QuoteStructOutput = [
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    string,
    boolean,
    BigNumber
  ] & {
    authority: string;
    owner: string;
    queueId: string;
    quoteBuffer: string;
    verificationStatus: number;
    verificationTimestamp: BigNumber;
    validUntil: BigNumber;
    mrEnclave: string;
    isOnQueue: boolean;
    lastHeartbeat: BigNumber;
  };
}

export interface QuoteInterface extends utils.Interface {
  functions: {
    "createQuote(address,address,address)": FunctionFragment;
    "createQuoteWithId(address,address,address,address)": FunctionFragment;
    "failQuote(address,address,uint256)": FunctionFragment;
    "forceOverrideVerify(address)": FunctionFragment;
    "isQuoteValid(address)": FunctionFragment;
    "quoteAuthorityToQuoteAddress(address)": FunctionFragment;
    "quoteGarbageCollect(address,uint256)": FunctionFragment;
    "quoteHeartbeat(address)": FunctionFragment;
    "quotes(address)": FunctionFragment;
    "rotateAuthority(address,address)": FunctionFragment;
    "updateQuote(address,bytes)": FunctionFragment;
    "validate(address,address,bytes32[])": FunctionFragment;
    "verifyQuote(address,address,uint256,uint256,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createQuote"
      | "createQuoteWithId"
      | "failQuote"
      | "forceOverrideVerify"
      | "isQuoteValid"
      | "quoteAuthorityToQuoteAddress"
      | "quoteGarbageCollect"
      | "quoteHeartbeat"
      | "quotes"
      | "rotateAuthority"
      | "updateQuote"
      | "validate"
      | "verifyQuote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createQuoteWithId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "failQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forceOverrideVerify",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuoteValid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAuthorityToQuoteAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteGarbageCollect",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteHeartbeat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quotes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateAuthority",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuote",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyQuote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createQuoteWithId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "failQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forceOverrideVerify",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuoteValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteAuthorityToQuoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteGarbageCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteHeartbeat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyQuote",
    data: BytesLike
  ): Result;

  events: {
    "QuoteAccountInit(address,address)": EventFragment;
    "QuoteGC(address,address)": EventFragment;
    "QuoteHeartbeat(address,address)": EventFragment;
    "QuotePayoutEvent(address,address,uint256)": EventFragment;
    "QuoteVerifyRequest(address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "QuoteAccountInit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteGC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteHeartbeat"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuotePayoutEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteVerifyRequest"): EventFragment;
}

export interface QuoteAccountInitEventObject {
  authority: string;
  accountId: string;
}
export type QuoteAccountInitEvent = TypedEvent<
  [string, string],
  QuoteAccountInitEventObject
>;

export type QuoteAccountInitEventFilter =
  TypedEventFilter<QuoteAccountInitEvent>;

export interface QuoteGCEventObject {
  quoteId: string;
  queue: string;
}
export type QuoteGCEvent = TypedEvent<[string, string], QuoteGCEventObject>;

export type QuoteGCEventFilter = TypedEventFilter<QuoteGCEvent>;

export interface QuoteHeartbeatEventObject {
  quoteId: string;
  authority: string;
}
export type QuoteHeartbeatEvent = TypedEvent<
  [string, string],
  QuoteHeartbeatEventObject
>;

export type QuoteHeartbeatEventFilter = TypedEventFilter<QuoteHeartbeatEvent>;

export interface QuotePayoutEventEventObject {
  nodeId: string;
  quoteId: string;
  amount: BigNumber;
}
export type QuotePayoutEventEvent = TypedEvent<
  [string, string, BigNumber],
  QuotePayoutEventEventObject
>;

export type QuotePayoutEventEventFilter =
  TypedEventFilter<QuotePayoutEventEvent>;

export interface QuoteVerifyRequestEventObject {
  queueId: string;
  verifier: string;
  verifiee: string;
}
export type QuoteVerifyRequestEvent = TypedEvent<
  [string, string, string],
  QuoteVerifyRequestEventObject
>;

export type QuoteVerifyRequestEventFilter =
  TypedEventFilter<QuoteVerifyRequestEvent>;

export interface Quote extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QuoteInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createQuote(
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createQuoteWithId(
      quoteId: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    failQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forceOverrideVerify(
      quoteId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isQuoteValid(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    quoteAuthorityToQuoteAddress(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quoteGarbageCollect(
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quoteHeartbeat(
      quoteId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quotes(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[QuoteLib.QuoteStructOutput]>;

    rotateAuthority(
      quoteId: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateQuote(
      quoteId: PromiseOrValue<string>,
      quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validate(
      authority: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      validMeasurements: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    verifyQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createQuote(
    authority: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createQuoteWithId(
    quoteId: PromiseOrValue<string>,
    authority: PromiseOrValue<string>,
    queueId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  failQuote(
    verifierId: PromiseOrValue<string>,
    quoteId: PromiseOrValue<string>,
    quoteIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forceOverrideVerify(
    quoteId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isQuoteValid(
    quoteId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  quoteAuthorityToQuoteAddress(
    authority: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  quoteGarbageCollect(
    quoteId: PromiseOrValue<string>,
    quoteIdx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quoteHeartbeat(
    quoteId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quotes(
    quoteId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<QuoteLib.QuoteStructOutput>;

  rotateAuthority(
    quoteId: PromiseOrValue<string>,
    newAuthority: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateQuote(
    quoteId: PromiseOrValue<string>,
    quoteBuffer: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validate(
    authority: PromiseOrValue<string>,
    attestationQueueId: PromiseOrValue<string>,
    validMeasurements: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<void>;

  verifyQuote(
    verifierId: PromiseOrValue<string>,
    quoteId: PromiseOrValue<string>,
    quoteIdx: PromiseOrValue<BigNumberish>,
    timestamp: PromiseOrValue<BigNumberish>,
    mrEnclave: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createQuote(
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createQuoteWithId(
      quoteId: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    failQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forceOverrideVerify(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isQuoteValid(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    quoteAuthorityToQuoteAddress(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    quoteGarbageCollect(
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    quoteHeartbeat(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    quotes(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<QuoteLib.QuoteStructOutput>;

    rotateAuthority(
      quoteId: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuote(
      quoteId: PromiseOrValue<string>,
      quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    validate(
      authority: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      validMeasurements: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    verifyQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "QuoteAccountInit(address,address)"(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null
    ): QuoteAccountInitEventFilter;
    QuoteAccountInit(
      authority?: PromiseOrValue<string> | null,
      accountId?: PromiseOrValue<string> | null
    ): QuoteAccountInitEventFilter;

    "QuoteGC(address,address)"(
      quoteId?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): QuoteGCEventFilter;
    QuoteGC(
      quoteId?: PromiseOrValue<string> | null,
      queue?: PromiseOrValue<string> | null
    ): QuoteGCEventFilter;

    "QuoteHeartbeat(address,address)"(
      quoteId?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): QuoteHeartbeatEventFilter;
    QuoteHeartbeat(
      quoteId?: PromiseOrValue<string> | null,
      authority?: PromiseOrValue<string> | null
    ): QuoteHeartbeatEventFilter;

    "QuotePayoutEvent(address,address,uint256)"(
      nodeId?: PromiseOrValue<string> | null,
      quoteId?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): QuotePayoutEventEventFilter;
    QuotePayoutEvent(
      nodeId?: PromiseOrValue<string> | null,
      quoteId?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null
    ): QuotePayoutEventEventFilter;

    "QuoteVerifyRequest(address,address,address)"(
      queueId?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
    QuoteVerifyRequest(
      queueId?: PromiseOrValue<string> | null,
      verifier?: PromiseOrValue<string> | null,
      verifiee?: PromiseOrValue<string> | null
    ): QuoteVerifyRequestEventFilter;
  };

  estimateGas: {
    createQuote(
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createQuoteWithId(
      quoteId: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    failQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forceOverrideVerify(
      quoteId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isQuoteValid(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteAuthorityToQuoteAddress(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteGarbageCollect(
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quoteHeartbeat(
      quoteId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quotes(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rotateAuthority(
      quoteId: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateQuote(
      quoteId: PromiseOrValue<string>,
      quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validate(
      authority: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      validMeasurements: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createQuote(
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createQuoteWithId(
      quoteId: PromiseOrValue<string>,
      authority: PromiseOrValue<string>,
      queueId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    failQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forceOverrideVerify(
      quoteId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isQuoteValid(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteAuthorityToQuoteAddress(
      authority: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteGarbageCollect(
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quoteHeartbeat(
      quoteId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quotes(
      quoteId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rotateAuthority(
      quoteId: PromiseOrValue<string>,
      newAuthority: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateQuote(
      quoteId: PromiseOrValue<string>,
      quoteBuffer: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      authority: PromiseOrValue<string>,
      attestationQueueId: PromiseOrValue<string>,
      validMeasurements: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyQuote(
      verifierId: PromiseOrValue<string>,
      quoteId: PromiseOrValue<string>,
      quoteIdx: PromiseOrValue<BigNumberish>,
      timestamp: PromiseOrValue<BigNumberish>,
      mrEnclave: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
