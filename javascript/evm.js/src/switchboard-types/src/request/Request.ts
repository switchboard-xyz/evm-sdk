/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace RequestLib {
  export type RequestStruct = {
    functionId: PromiseOrValue<string>;
    authority: PromiseOrValue<string>;
    createdAt: PromiseOrValue<BigNumberish>;
    requestData: PromiseOrValue<BytesLike>;
    executed: PromiseOrValue<boolean>;
    consecutiveFailures: PromiseOrValue<BigNumberish>;
    balance: PromiseOrValue<BigNumberish>;
    startAfter: PromiseOrValue<BigNumberish>;
    errorCode: PromiseOrValue<BigNumberish>;
    executedAt: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type RequestStructOutput = [
    string,
    string,
    BigNumber,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber,
    number
  ] & {
    functionId: string;
    authority: string;
    createdAt: BigNumber;
    requestData: string;
    executed: boolean;
    consecutiveFailures: BigNumber;
    balance: BigNumber;
    startAfter: BigNumber;
    errorCode: number;
    executedAt: BigNumber;
    status: number;
  };
}

export interface RequestInterface extends utils.Interface {
  functions: {
    "getActiveRequestsByQueue(address)": FunctionFragment;
    "getRequestsByFunctionId(address)": FunctionFragment;
    "requestFund(address)": FunctionFragment;
    "requestWithdrawal(address,address,uint256)": FunctionFragment;
    "requests(address)": FunctionFragment;
    "sendDelayedRequest(address,address,bytes,uint256)": FunctionFragment;
    "sendRequest(address,bytes)": FunctionFragment;
    "sendRequestWithId(address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getActiveRequestsByQueue"
      | "getRequestsByFunctionId"
      | "requestFund"
      | "requestWithdrawal"
      | "requests"
      | "sendDelayedRequest"
      | "sendRequest"
      | "sendRequestWithId"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getActiveRequestsByQueue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestsByFunctionId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFund",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "requests",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendDelayedRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequest",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRequestWithId",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getActiveRequestsByQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestsByFunctionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "requests", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sendDelayedRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRequestWithId",
    data: BytesLike
  ): Result;

  events: {
    "RequestEvent(address,address,address,bytes)": EventFragment;
    "RequestFund(address,address,uint256)": EventFragment;
    "RequestWithdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestFund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdraw"): EventFragment;
}

export interface RequestEventEventObject {
  functionId: string;
  sender: string;
  requestId: string;
  params: string;
}
export type RequestEventEvent = TypedEvent<
  [string, string, string, string],
  RequestEventEventObject
>;

export type RequestEventEventFilter = TypedEventFilter<RequestEventEvent>;

export interface RequestFundEventObject {
  functionId: string;
  funder: string;
  amount: BigNumber;
}
export type RequestFundEvent = TypedEvent<
  [string, string, BigNumber],
  RequestFundEventObject
>;

export type RequestFundEventFilter = TypedEventFilter<RequestFundEvent>;

export interface RequestWithdrawEventObject {
  functionId: string;
  funder: string;
  amount: BigNumber;
}
export type RequestWithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  RequestWithdrawEventObject
>;

export type RequestWithdrawEventFilter = TypedEventFilter<RequestWithdrawEvent>;

export interface Request extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RequestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getActiveRequestsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], RequestLib.RequestStructOutput[]]>;

    getRequestsByFunctionId(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], RequestLib.RequestStructOutput[]]>;

    requestFund(
      requestId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      requestId: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requests(
      requestId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[RequestLib.RequestStructOutput]>;

    sendDelayedRequest(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      startAfter: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRequest(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRequestWithId(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getActiveRequestsByQueue(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], RequestLib.RequestStructOutput[]]>;

  getRequestsByFunctionId(
    functionId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string[], RequestLib.RequestStructOutput[]]>;

  requestFund(
    requestId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    requestId: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requests(
    requestId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RequestLib.RequestStructOutput>;

  sendDelayedRequest(
    requestId: PromiseOrValue<string>,
    functionId: PromiseOrValue<string>,
    params: PromiseOrValue<BytesLike>,
    startAfter: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRequest(
    functionId: PromiseOrValue<string>,
    params: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRequestWithId(
    requestId: PromiseOrValue<string>,
    functionId: PromiseOrValue<string>,
    params: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getActiveRequestsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], RequestLib.RequestStructOutput[]]>;

    getRequestsByFunctionId(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[], RequestLib.RequestStructOutput[]]>;

    requestFund(
      requestId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawal(
      requestId: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requests(
      requestId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RequestLib.RequestStructOutput>;

    sendDelayedRequest(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      startAfter: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRequest(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    sendRequestWithId(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "RequestEvent(address,address,address,bytes)"(
      functionId?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<string> | null,
      params?: null
    ): RequestEventEventFilter;
    RequestEvent(
      functionId?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null,
      requestId?: PromiseOrValue<string> | null,
      params?: null
    ): RequestEventEventFilter;

    "RequestFund(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: null
    ): RequestFundEventFilter;
    RequestFund(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: null
    ): RequestFundEventFilter;

    "RequestWithdraw(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: null
    ): RequestWithdrawEventFilter;
    RequestWithdraw(
      functionId?: PromiseOrValue<string> | null,
      funder?: PromiseOrValue<string> | null,
      amount?: null
    ): RequestWithdrawEventFilter;
  };

  estimateGas: {
    getActiveRequestsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequestsByFunctionId(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestFund(
      requestId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      requestId: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requests(
      requestId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendDelayedRequest(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      startAfter: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRequest(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRequestWithId(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getActiveRequestsByQueue(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequestsByFunctionId(
      functionId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestFund(
      requestId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      requestId: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requests(
      requestId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendDelayedRequest(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      startAfter: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRequest(
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRequestWithId(
      requestId: PromiseOrValue<string>,
      functionId: PromiseOrValue<string>,
      params: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
