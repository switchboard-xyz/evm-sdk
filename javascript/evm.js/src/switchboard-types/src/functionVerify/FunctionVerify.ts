/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace FunctionVerifyLib {
  export type FunctionFailParamsStruct = {
    enclaveIdx: PromiseOrValue<BigNumberish>;
    functionId: PromiseOrValue<string>;
    observedTime: PromiseOrValue<BigNumberish>;
    nextAllowedTimestamp: PromiseOrValue<BigNumberish>;
    code: PromiseOrValue<BigNumberish>;
    ids: PromiseOrValue<string>[];
    checksums: PromiseOrValue<BytesLike>[];
    codes: PromiseOrValue<BigNumberish>[];
  };

  export type FunctionFailParamsStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    string[],
    string[],
    number[]
  ] & {
    enclaveIdx: BigNumber;
    functionId: string;
    observedTime: BigNumber;
    nextAllowedTimestamp: BigNumber;
    code: number;
    ids: string[];
    checksums: string[];
    codes: number[];
  };

  export type FunctionVerifyParamsStruct = {
    enclaveIdx: PromiseOrValue<BigNumberish>;
    functionId: PromiseOrValue<string>;
    delegatedSignerAddress: PromiseOrValue<string>;
    observedTime: PromiseOrValue<BigNumberish>;
    nextAllowedTimestamp: PromiseOrValue<BigNumberish>;
    mrEnclave: PromiseOrValue<BytesLike>;
    transactions: TransactionLib.TransactionStruct[];
    signatures: PromiseOrValue<BytesLike>[];
    ids: PromiseOrValue<string>[];
    checksums: PromiseOrValue<BytesLike>[];
    codes: PromiseOrValue<BigNumberish>[];
  };

  export type FunctionVerifyParamsStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    TransactionLib.TransactionStructOutput[],
    string[],
    string[],
    string[],
    number[]
  ] & {
    enclaveIdx: BigNumber;
    functionId: string;
    delegatedSignerAddress: string;
    observedTime: BigNumber;
    nextAllowedTimestamp: BigNumber;
    mrEnclave: string;
    transactions: TransactionLib.TransactionStructOutput[];
    signatures: string[];
    ids: string[];
    checksums: string[];
    codes: number[];
  };
}

export declare namespace TransactionLib {
  export type TransactionStruct = {
    expirationTimeSeconds: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    to: PromiseOrValue<string>;
    from: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type TransactionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    expirationTimeSeconds: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    to: string;
    from: string;
    data: string;
  };
}

export interface FunctionVerifyInterface extends utils.Interface {
  functions: {
    "failFunctionResult((uint256,address,uint256,uint256,uint8,address[],bytes32[],uint8[]))": FunctionFragment;
    "verifyFunctionResult((uint256,address,address,uint256,uint256,bytes32,(uint256,uint256,uint256,address,address,bytes)[],bytes[],address[],bytes32[],uint8[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "failFunctionResult" | "verifyFunctionResult"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "failFunctionResult",
    values: [FunctionVerifyLib.FunctionFailParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyFunctionResult",
    values: [FunctionVerifyLib.FunctionVerifyParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "failFunctionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyFunctionResult",
    data: BytesLike
  ): Result;

  events: {
    "VerifyFailed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "VerifyFailed"): EventFragment;
}

export interface VerifyFailedEventObject {
  functionId: string;
  callId: string;
  code: BigNumber;
}
export type VerifyFailedEvent = TypedEvent<
  [string, string, BigNumber],
  VerifyFailedEventObject
>;

export type VerifyFailedEventFilter = TypedEventFilter<VerifyFailedEvent>;

export interface FunctionVerify extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FunctionVerifyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    failFunctionResult(
      params: FunctionVerifyLib.FunctionFailParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyFunctionResult(
      params: FunctionVerifyLib.FunctionVerifyParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  failFunctionResult(
    params: FunctionVerifyLib.FunctionFailParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyFunctionResult(
    params: FunctionVerifyLib.FunctionVerifyParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    failFunctionResult(
      params: FunctionVerifyLib.FunctionFailParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyFunctionResult(
      params: FunctionVerifyLib.FunctionVerifyParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "VerifyFailed(address,address,uint256)"(
      functionId?: PromiseOrValue<string> | null,
      callId?: PromiseOrValue<string> | null,
      code?: PromiseOrValue<BigNumberish> | null
    ): VerifyFailedEventFilter;
    VerifyFailed(
      functionId?: PromiseOrValue<string> | null,
      callId?: PromiseOrValue<string> | null,
      code?: PromiseOrValue<BigNumberish> | null
    ): VerifyFailedEventFilter;
  };

  estimateGas: {
    failFunctionResult(
      params: FunctionVerifyLib.FunctionFailParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyFunctionResult(
      params: FunctionVerifyLib.FunctionVerifyParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    failFunctionResult(
      params: FunctionVerifyLib.FunctionFailParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyFunctionResult(
      params: FunctionVerifyLib.FunctionVerifyParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
