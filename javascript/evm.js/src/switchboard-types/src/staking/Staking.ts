/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace StakingLib {
  export type StakeStruct = {
    amount: PromiseOrValue<BigNumberish>;
    readyAt: PromiseOrValue<BigNumberish>;
    unstakeReadyAt: PromiseOrValue<BigNumberish>;
    lastUpdated: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
  };

  export type StakeStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    amount: BigNumber;
    readyAt: BigNumber;
    unstakeReadyAt: BigNumber;
    lastUpdated: BigNumber;
    token: string;
  };

  export type StakingConfigStruct = {
    token: PromiseOrValue<string>;
    stakingAmount: PromiseOrValue<BigNumberish>;
    stakingPeriod: PromiseOrValue<BigNumberish>;
    unstakingPeriod: PromiseOrValue<BigNumberish>;
  };

  export type StakingConfigStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    token: string;
    stakingAmount: BigNumber;
    stakingPeriod: BigNumber;
    unstakingPeriod: BigNumber;
  };
}

export interface StakingInterface extends utils.Interface {
  functions: {
    "addStake(address,uint256)": FunctionFragment;
    "getStakeForEnclave(address)": FunctionFragment;
    "getStakeForEnclaveWithToken(address,address)": FunctionFragment;
    "getStakingConfig(address)": FunctionFragment;
    "prepareUnstake(address)": FunctionFragment;
    "recoverStakeWithToken(address,address,uint256)": FunctionFragment;
    "setStakingConfig(address,address,uint256,uint256,uint256)": FunctionFragment;
    "slashStake(address,uint256)": FunctionFragment;
    "totalStaked(address,address)": FunctionFragment;
    "unstake(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addStake"
      | "getStakeForEnclave"
      | "getStakeForEnclaveWithToken"
      | "getStakingConfig"
      | "prepareUnstake"
      | "recoverStakeWithToken"
      | "setStakingConfig"
      | "slashStake"
      | "totalStaked"
      | "unstake"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addStake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeForEnclave",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeForEnclaveWithToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingConfig",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "prepareUnstake",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverStakeWithToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "slashStake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakeForEnclave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeForEnclaveWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "prepareUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverStakeWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slashStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "StakeAdded(address,address,uint256,address)": EventFragment;
    "StakeRemoved(address,address,uint256,address)": EventFragment;
    "Unstaked(address,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export interface StakeAddedEventObject {
  queueId: string;
  staker: string;
  amount: BigNumber;
  sender: string;
}
export type StakeAddedEvent = TypedEvent<
  [string, string, BigNumber, string],
  StakeAddedEventObject
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export interface StakeRemovedEventObject {
  queueId: string;
  staker: string;
  amount: BigNumber;
  sender: string;
}
export type StakeRemovedEvent = TypedEvent<
  [string, string, BigNumber, string],
  StakeRemovedEventObject
>;

export type StakeRemovedEventFilter = TypedEventFilter<StakeRemovedEvent>;

export interface UnstakedEventObject {
  queueId: string;
  staker: string;
  amount: BigNumber;
  sender: string;
}
export type UnstakedEvent = TypedEvent<
  [string, string, BigNumber, string],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface Staking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getStakeForEnclave(
      enclaveId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StakingLib.StakeStructOutput]>;

    getStakeForEnclaveWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StakingLib.StakeStructOutput]>;

    getStakingConfig(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[StakingLib.StakingConfigStructOutput]>;

    prepareUnstake(
      enclaveId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    recoverStakeWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingConfig(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stakingAmount: PromiseOrValue<BigNumberish>,
      stakingPeriod: PromiseOrValue<BigNumberish>,
      unstakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalStaked(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addStake(
    enclaveId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getStakeForEnclave(
    enclaveId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StakingLib.StakeStructOutput>;

  getStakeForEnclaveWithToken(
    enclaveId: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StakingLib.StakeStructOutput>;

  getStakingConfig(
    queueId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<StakingLib.StakingConfigStructOutput>;

  prepareUnstake(
    enclaveId: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  recoverStakeWithToken(
    enclaveId: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingConfig(
    queueId: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    stakingAmount: PromiseOrValue<BigNumberish>,
    stakingPeriod: PromiseOrValue<BigNumberish>,
    unstakingPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashStake(
    enclaveId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalStaked(
    queueId: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    enclaveId: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getStakeForEnclave(
      enclaveId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StakingLib.StakeStructOutput>;

    getStakeForEnclaveWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StakingLib.StakeStructOutput>;

    getStakingConfig(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<StakingLib.StakingConfigStructOutput>;

    prepareUnstake(
      enclaveId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverStakeWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingConfig(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stakingAmount: PromiseOrValue<BigNumberish>,
      stakingPeriod: PromiseOrValue<BigNumberish>,
      unstakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    slashStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalStaked(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StakeAdded(address,address,uint256,address)"(
      queueId?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      queueId?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: null
    ): StakeAddedEventFilter;

    "StakeRemoved(address,address,uint256,address)"(
      queueId?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: null
    ): StakeRemovedEventFilter;
    StakeRemoved(
      queueId?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: null
    ): StakeRemovedEventFilter;

    "Unstaked(address,address,uint256,address)"(
      queueId?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: null
    ): UnstakedEventFilter;
    Unstaked(
      queueId?: PromiseOrValue<string> | null,
      staker?: PromiseOrValue<string> | null,
      amount?: null,
      sender?: null
    ): UnstakedEventFilter;
  };

  estimateGas: {
    addStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getStakeForEnclave(
      enclaveId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakeForEnclaveWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingConfig(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prepareUnstake(
      enclaveId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    recoverStakeWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingConfig(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stakingAmount: PromiseOrValue<BigNumberish>,
      stakingPeriod: PromiseOrValue<BigNumberish>,
      unstakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalStaked(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getStakeForEnclave(
      enclaveId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakeForEnclaveWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingConfig(
      queueId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prepareUnstake(
      enclaveId: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    recoverStakeWithToken(
      enclaveId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingConfig(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stakingAmount: PromiseOrValue<BigNumberish>,
      stakingPeriod: PromiseOrValue<BigNumberish>,
      unstakingPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashStake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalStaked(
      queueId: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      enclaveId: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
