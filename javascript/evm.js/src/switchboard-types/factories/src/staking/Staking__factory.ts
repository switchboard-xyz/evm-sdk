/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Staking, StakingInterface } from "../../../src/staking/Staking";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAdmin",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "ACLNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "attestationQueueId",
        type: "address",
      },
    ],
    name: "AttestationQueueDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "EnclaveDoesNotExist",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expected",
        type: "address",
      },
      {
        internalType: "address",
        name: "received",
        type: "address",
      },
    ],
    name: "IncorrectToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "expectedAuthority",
        type: "address",
      },
      {
        internalType: "address",
        name: "receivedAuthority",
        type: "address",
      },
    ],
    name: "InvalidAuthority",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidEntry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "readyAt",
        type: "uint256",
      },
    ],
    name: "StakeNotReadyForWithdrawal",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "TokenTransferFailure",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "StakeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "StakeRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "staker",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "getStakeForEnclave",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "readyAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "unstakeReadyAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdated",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
        ],
        internalType: "struct StakingLib.Stake",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getStakeForEnclaveWithToken",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "readyAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "unstakeReadyAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastUpdated",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
        ],
        internalType: "struct StakingLib.Stake",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
    ],
    name: "getStakingConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "stakingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stakingPeriod",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "unstakingPeriod",
            type: "uint256",
          },
        ],
        internalType: "struct StakingLib.StakingConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
    ],
    name: "prepareUnstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "recoverStakeWithToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "stakingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "stakingPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unstakingPeriod",
        type: "uint256",
      },
    ],
    name: "setStakingConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "slashStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "queueId",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "totalStaked",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "enclaveId",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611dfb806100206000396000f3fe6080604052600436106100915760003560e01c806398d1c5a81161005957806398d1c5a8146101b6578063b8d35d6a146101d6578063c2a672e0146101f6578063f21630cb14610216578063f22644c21461024457600080fd5b8063376d9b41146100965780633ff8f2af146101055780635133a68c146101255780635e8e1ad0146101815780636374299e146101a3575b600080fd5b3480156100a257600080fd5b506100b66100b1366004611b92565b610264565b6040516100fc9190815181526020808301519082015260408083015190820152606080830151908201526080918201516001600160a01b03169181019190915260a00190565b60405180910390f35b34801561011157600080fd5b506100b6610120366004611bad565b6102f6565b34801561013157600080fd5b50610145610140366004611b92565b61036f565b6040516100fc919081516001600160a01b0316815260208083015190820152604080830151908201526060918201519181019190915260800190565b34801561018d57600080fd5b506101a161019c366004611be0565b6103ea565b005b6101a16101b1366004611c1c565b610706565b3480156101c257600080fd5b506101a16101d1366004611c1c565b610a61565b3480156101e257600080fd5b506101a16101f1366004611b92565b610d77565b34801561020257600080fd5b506101a1610211366004611c1c565b611018565b34801561022257600080fd5b50610236610231366004611bad565b61140a565b6040519081526020016100fc565b34801561025057600080fd5b506101a161025f366004611c46565b611447565b61026c611b3e565b6000610277836115f4565b600201546001600160a01b03169050600061029182611636565b80549091506102ac90839086906001600160a01b031661164c565b6040805160a0810182528254815260018301546020820152600283015491810191909152600382015460608201526004909101546001600160a01b03166080820152949350505050565b6102fe611b3e565b6000610309846115f4565b600201546001600160a01b0316905061032381858561164c565b6040805160a0810182528254815260018301546020820152600283015491810191909152600382015460608201526004909101546001600160a01b031660808201529150505b92915050565b6103a3604051806080016040528060006001600160a01b031681526020016000815260200160008152602001600081525090565b6103ac82611636565b6040805160808101825282546001600160a01b0316815260018301546020820152600283015491810191909152600390910154606082015292915050565b60026000610404600080516020611d468339815191525490565b9050600282600481111561041a5761041a611c93565b118015610434575061043261042d61168d565b6116ba565b155b1561046b5761044161168d565b604051630754d25d60e51b81526001600160a01b0390911660048201526024015b60405180910390fd5b600482600481111561047f5761047f611c93565b148015610499575061049761049261168d565b611743565b155b156104ca576104a661168d565b6040516275103f60e11b81526001600160a01b039091166004820152602401610462565b60018260048111156104de576104de611c93565b1480156104ea57508015155b156105085760405163887efaa560e01b815260040160405180910390fd5b6001811415801561051857508015155b156105365760405163887efaa560e01b815260040160405180910390fd5b61055d82600481111561054b5761054b611c93565b600080516020611d4683398151915255565b6105668561176b565b61058e5760405163170c65f360e21b81526001600160a01b0386166004820152602401610462565b6000610599866115f4565b60018101549091506001600160a01b031633146105da57600181015460405163bf89df8360e01b8152610462916001600160a01b0316903390600401611ca9565b60028101546000906105f4906001600160a01b0316611636565b80549091506001600160a01b03808816911603610632578054604051639334834f60e01b8152610462916001600160a01b0316908890600401611ca9565b600282015461064c906001600160a01b03168733886117b7565b60405163a9059cbb60e01b8152336004820152602481018690526000906001600160a01b0388169063a9059cbb906044016020604051808303816000875af115801561069c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c09190611cc3565b9050806106e6578633876040516395eb946f60e01b815260040161046293929190611ce5565b5050506106ff81600080516020611d4683398151915255565b5050505050565b60026000610720600080516020611d468339815191525490565b9050600282600481111561073657610736611c93565b11801561074b575061074961042d61168d565b155b156107585761044161168d565b600482600481111561076c5761076c611c93565b148015610781575061077f61049261168d565b155b1561078e576104a661168d565b60018260048111156107a2576107a2611c93565b1480156107ae57508015155b156107cc5760405163887efaa560e01b815260040160405180910390fd5b600181141580156107dc57508015155b156107fa5760405163887efaa560e01b815260040160405180910390fd5b61080f82600481111561054b5761054b611c93565b6108188461176b565b6108405760405163170c65f360e21b81526001600160a01b0385166004820152602401610462565b600080516020611d86833981519152600061085a866115f4565b6002810154909150600090610877906001600160a01b0316611636565b80549091506001600160a01b03166108b3578054604051639334834f60e01b8152610462916000916001600160a01b0390911690600401611ca9565b60018201546002808401546001600160a01b039081166000908152868301602090815260408083208d851684528252808320875485168452909152902090910154911633149015158115826109055750805b1561093457600184015460405163bf89df8360e01b8152610462916001600160a01b0316903390600401611ca9565b82546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd9061096890339030908e90600401611ce5565b6020604051808303816000875af1158015610987573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ab9190611cc3565b9050806109db5783546040516395eb946f60e01b8152610462916001600160a01b03169030908c90600401611ce5565b60028501546109f4906001600160a01b03168b8b611873565b6002850154604080518b81523360208201526001600160a01b038d81169316917f3459cbf0a7955eafa012bd13b0a3d88783f868413eb32a7322224b8d79e12fa1910160405180910390a3505050505050610a5b81600080516020611d4683398151915255565b50505050565b60046000610a7b600080516020611d468339815191525490565b90506002826004811115610a9157610a91611c93565b118015610aa65750610aa461042d61168d565b155b15610ab35761044161168d565b6004826004811115610ac757610ac7611c93565b148015610adc5750610ada61049261168d565b155b15610ae9576104a661168d565b6001826004811115610afd57610afd611c93565b148015610b0957508015155b15610b275760405163887efaa560e01b815260040160405180910390fd5b60018114158015610b3757508015155b15610b555760405163887efaa560e01b815260040160405180910390fd5b610b6a82600481111561054b5761054b611c93565b610b738461176b565b610b9b5760405163170c65f360e21b81526001600160a01b0385166004820152602401610462565b6000610ba6856115f4565b6002810154909150600090610bc3906001600160a01b0316611636565b6002830154909150600090610be0906001600160a01b031661196b565b80549091506001600160a01b03163314610c1b57805460405163bf89df8360e01b8152610462916001600160a01b0316903390600401611ca9565b81546001600160a01b0316610c54578154604051639334834f60e01b8152610462916000916001600160a01b0390911690600401611ca9565b6002830154610c6d906001600160a01b03168888611993565b815460405163a9059cbb60e01b8152336004820152602481018890526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce29190611cc3565b905080610d125782546040516395eb946f60e01b8152610462916001600160a01b03169033908a90600401611ce5565b6002840154604080518981523360208201526001600160a01b038b81169316917f5de529cd2595fd5efdc20eeb82ca6aceac778d7232ae2300712ada0a3253f6b0910160405180910390a350505050610a5b81600080516020611d4683398151915255565b60026000610d91600080516020611d468339815191525490565b90506002826004811115610da757610da7611c93565b118015610dbc5750610dba61042d61168d565b155b15610dc95761044161168d565b6004826004811115610ddd57610ddd611c93565b148015610df25750610df061049261168d565b155b15610dff576104a661168d565b6001826004811115610e1357610e13611c93565b148015610e1f57508015155b15610e3d5760405163887efaa560e01b815260040160405180910390fd5b60018114158015610e4d57508015155b15610e6b5760405163887efaa560e01b815260040160405180910390fd5b610e8082600481111561054b5761054b611c93565b610e898361176b565b610eb15760405163170c65f360e21b81526001600160a01b0384166004820152602401610462565b600080516020611d868339815191526000610ecb856115f4565b6002810154909150600090610ee8906001600160a01b0316611636565b80549091506001600160a01b0316610f24578054604051639334834f60e01b8152610462916000916001600160a01b0390911690600401611ca9565b60018201546001600160a01b03163314610f6257600182015460405163bf89df8360e01b8152610462916001600160a01b0316903390600401611ca9565b60028201548154610f80916001600160a01b03908116911633611a55565b6002828101546001600160a01b039081166000818152928601602090815260408085208b851680875290835281862087549095168652938252938490205484519081523391810191909152919290917f853c738a1187c5dc7894cf5b4a2666ac0bcb3232c31148554b655cb55c38235e910160405180910390a350505061101381600080516020611d4683398151915255565b505050565b60026000611032600080516020611d468339815191525490565b9050600282600481111561104857611048611c93565b11801561105d575061105b61042d61168d565b155b1561106a5761044161168d565b600482600481111561107e5761107e611c93565b148015611093575061109161049261168d565b155b156110a0576104a661168d565b60018260048111156110b4576110b4611c93565b1480156110c057508015155b156110de5760405163887efaa560e01b815260040160405180910390fd5b600181141580156110ee57508015155b1561110c5760405163887efaa560e01b815260040160405180910390fd5b61112182600481111561054b5761054b611c93565b61112a8461176b565b6111525760405163170c65f360e21b81526001600160a01b0385166004820152602401610462565b600080516020611d86833981519152600061116c866115f4565b60018101549091506001600160a01b031633146111ad57600181015460405163bf89df8360e01b8152610462916001600160a01b0316903390600401611ca9565b60028101546000906111c7906001600160a01b0316611636565b80549091506001600160a01b0316611203578054604051639334834f60e01b8152610462916000916001600160a01b0390911690600401611ca9565b6002828101546001600160a01b039081166000908152828601602090815260408083208c851684528252808320865490941683529290529081209091015442108061128557506002838101546001600160a01b039081166000908152828701602090815260408083208d85168452825280832087549094168352929052200154155b905080156112e6576002808401546001600160a01b039081166000818152878401602090815260408083208e86168452825280832088549095168352939052829020909201549051633009a91560e21b815261046292918b91600401611ce5565b60028301546112ff906001600160a01b03168989611993565b815460405163a9059cbb60e01b8152336004820152602481018990526000916001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611350573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113749190611cc3565b9050806113a45782546040516395eb946f60e01b8152610462916001600160a01b03169033908b90600401611ce5565b6002840154604080518a81523360208201526001600160a01b038c81169316917f5de529cd2595fd5efdc20eeb82ca6aceac778d7232ae2300712ada0a3253f6b0910160405180910390a35050505050610a5b81600080516020611d4683398151915255565b6001600160a01b038083166000908152600080516020611da6833981519152602090815260408083209385168352929052908120545b9392505050565b60036000611461600080516020611d468339815191525490565b9050600282600481111561147757611477611c93565b11801561148c575061148a61042d61168d565b155b156114995761044161168d565b60048260048111156114ad576114ad611c93565b1480156114c257506114c061049261168d565b155b156114cf576104a661168d565b60018260048111156114e3576114e3611c93565b1480156114ef57508015155b1561150d5760405163887efaa560e01b815260040160405180910390fd5b6001811415801561151d57508015155b1561153b5760405163887efaa560e01b815260040160405180910390fd5b61155082600481111561054b5761054b611c93565b61155987611ad5565b61158157604051630da329cf60e01b81526001600160a01b0388166004820152602401610462565b600061158c8861196b565b80549091506001600160a01b031633146115c757805460405163bf89df8360e01b8152610462916001600160a01b0316903390600401611ca9565b6115d48888888888611afe565b506115eb81600080516020611d4683398151915255565b50505050505050565b60007f0b069b3f7005cf212866feceedec3f4a425661eeb7c281e5cbcbe563cfddd0985b6001600160a01b039092166000908152602092909252506040902090565b6000600080516020611d86833981519152611618565b6001600160a01b039283166000908152600080516020611d668339815191526020908152604080832094861683529381528382209290941681529252902090565b33601436108015906116a757506001600160a01b03811630145b156116b7575060131936013560601c5b90565b6001600160a01b03811660009081527fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c825602052604081205460ff168061036957507fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c8235b6001600160a01b0383166000908152600191909101602052604090205460ff1692915050565b60007fec717508ea0d3d9f736b2da60dd18c1864c124710105fae8984f76b69eb3c82361171d565b6000807f0b069b3f7005cf212866feceedec3f4a425661eeb7c281e5cbcbe563cfddd0985b6001600160a01b039384166000908152602091909152604090205490921690911415919050565b6001600160a01b038481166000818152600080516020611d8683398151915260208181526040808420600080516020611d668339815191528352818520898816865283528185208a881686528352818520958552600080516020611da6833981519152835281852081549097168552959091528220805491949392869261183f908490611d1f565b9091555050805484908290600090611858908490611d1f565b90915550504260038201556000600290910155505050505050565b6001600160a01b038381166000818152600080516020611d8683398151915260208181526040808420600080516020611d66833981519152835281852089881686528352818520815490971680865296835281852060018201548154978752600080516020611da6833981519152855283872098875297909352908420805493969195929491909210928792919061190c908490611d32565b9091555050815485908390600090611925908490611d32565b90915550504260038301556000600283015580801561194957506001830154825410155b156115eb57600283015461195d9042611d32565b600183015550505050505050565b60007f60afd68830977364a6093883acfe9f98da214c7c3590e74cf82ad9ef006ddc3e611618565b6001600160a01b038381166000818152600080516020611d8683398151915260208181526040808420600080516020611d668339815191528352818520898816865283528185208154909716808652968352818520958552600080516020611da683398151915283528185209685529590915282208054919493928692611a1b908490611d1f565b9091555050805484908290600090611a34908490611d1f565b90915550504260038201556000600182018190556002909101555050505050565b6001600160a01b038381166000818152600080516020611d6683398151915260209081526040808320868616845282528083209487168352938152838220928252600080516020611d86833981519152908190529290206003810154611abb9042611d32565b600283015550426003820155600060019091015550505050565b6000807f60afd68830977364a6093883acfe9f98da214c7c3590e74cf82ad9ef006ddc3e611790565b6000611b0986611636565b80546001600160a01b0319166001600160a01b0396909616959095178555506001840192909255600283015560039091015550565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b80356001600160a01b0381168114611b8d57600080fd5b919050565b600060208284031215611ba457600080fd5b61144082611b76565b60008060408385031215611bc057600080fd5b611bc983611b76565b9150611bd760208401611b76565b90509250929050565b600080600060608486031215611bf557600080fd5b611bfe84611b76565b9250611c0c60208501611b76565b9150604084013590509250925092565b60008060408385031215611c2f57600080fd5b611c3883611b76565b946020939093013593505050565b600080600080600060a08688031215611c5e57600080fd5b611c6786611b76565b9450611c7560208701611b76565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0392831681529116602082015260400190565b600060208284031215611cd557600080fd5b8151801515811461144057600080fd5b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b8181038181111561036957610369611d09565b8082018082111561036957610369611d0956fe20ced3562caba8901b8e6c0f45f2eefc88fe6f62c9647c3abea04219d18063b6c8b92a6aada0b6ff7b493186f8c9487f2cfcb749502b3cfd6e2f5195915c3a1cc8b92a6aada0b6ff7b493186f8c9487f2cfcb749502b3cfd6e2f5195915c3a1ac8b92a6aada0b6ff7b493186f8c9487f2cfcb749502b3cfd6e2f5195915c3a1ba2646970667358221220d1a4134f19dc400d31edc4a3606439ddf4597bb96dcd7594a2818f47f7593bc964736f6c63430008110033";

type StakingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Staking__factory extends ContractFactory {
  constructor(...args: StakingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Staking> {
    return super.deploy(overrides || {}) as Promise<Staking>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Staking {
    return super.attach(address) as Staking;
  }
  override connect(signer: Signer): Staking__factory {
    return super.connect(signer) as Staking__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingInterface {
    return new utils.Interface(_abi) as StakingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Staking {
    return new Contract(address, _abi, signerOrProvider) as Staking;
  }
}
