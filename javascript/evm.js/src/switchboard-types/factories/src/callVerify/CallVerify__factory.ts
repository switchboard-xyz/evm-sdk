/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CallVerify,
  CallVerifyInterface,
} from "../../../src/callVerify/CallVerify";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "callId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
    ],
    name: "InvalidCallbackParams",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "callIds",
        type: "address[]",
      },
      {
        internalType: "bytes32[]",
        name: "hashes",
        type: "bytes32[]",
      },
    ],
    name: "verifyCallbackParams",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610374806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639c5eb6d914610030575b600080fd5b61004361003e366004610232565b610045565b005b61004f8282610053565b5050565b7f369c34b0cf6a0c0360099093f8ebb465df4755f0e75ec0446b0d3884a8735f3760005b83518110156101565782818151811061009257610092610301565b60200260200101518260000160008684815181106100b2576100b2610301565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000205414610144578381815181106100f2576100f2610301565b602002602001015183828151811061010c5761010c610301565b60209081029190910101516040516271b3a960e61b81526001600160a01b039092166004830152602482015260440160405180910390fd5b8061014e81610317565b915050610077565b50505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561019b5761019b61015c565b604052919050565b600067ffffffffffffffff8211156101bd576101bd61015c565b5060051b60200190565b600082601f8301126101d857600080fd5b813560206101ed6101e8836101a3565b610172565b82815260059290921b8401810191818101908684111561020c57600080fd5b8286015b848110156102275780358352918301918301610210565b509695505050505050565b6000806040838503121561024557600080fd5b823567ffffffffffffffff8082111561025d57600080fd5b818501915085601f83011261027157600080fd5b813560206102816101e8836101a3565b82815260059290921b840181019181810190898411156102a057600080fd5b948201945b838610156102d45785356001600160a01b03811681146102c55760008081fd5b825294820194908201906102a5565b965050860135925050808211156102ea57600080fd5b506102f7858286016101c7565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b60006001820161033757634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220397efb3b540084721670e78fcfbf13f12088ecdd39e51fd337eb00203a0ca60864736f6c63430008110033";

type CallVerifyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CallVerifyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CallVerify__factory extends ContractFactory {
  constructor(...args: CallVerifyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CallVerify> {
    return super.deploy(overrides || {}) as Promise<CallVerify>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CallVerify {
    return super.attach(address) as CallVerify;
  }
  override connect(signer: Signer): CallVerify__factory {
    return super.connect(signer) as CallVerify__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CallVerifyInterface {
    return new utils.Interface(_abi) as CallVerifyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CallVerify {
    return new Contract(address, _abi, signerOrProvider) as CallVerify;
  }
}
