/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Aggregator,
  AggregatorInterface,
} from "../../../../src/Receiver/Aggregator.sol/Aggregator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_switchboard",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feedId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_feedName",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_description",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "feedName",
        type: "bytes32",
      },
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    name: "RoundEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feedId",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feedName",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "switchboardPricesContract",
    outputs: [
      {
        internalType: "contract Receiver",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "viewLatestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "viewRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b5638038062000b56833981016040819052620000349162000174565b600080546001600160a01b038088166001600160a01b0319928316179092556001805492871692909116919091179055600283905560036200007783826200029d565b5060046200008682826200029d565b50505050505062000369565b80516001600160a01b0381168114620000aa57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620000d757600080fd5b81516001600160401b0380821115620000f457620000f4620000af565b604051601f8301601f19908116603f011681019082821181831017156200011f576200011f620000af565b816040528381526020925086838588010111156200013c57600080fd5b600091505b8382101562000160578582018301518183018401529082019062000141565b600093810190920192909252949350505050565b600080600080600060a086880312156200018d57600080fd5b620001988662000092565b9450620001a86020870162000092565b6040870151606088015191955093506001600160401b0380821115620001cd57600080fd5b620001db89838a01620000c5565b93506080880151915080821115620001f257600080fd5b506200020188828901620000c5565b9150509295509295909350565b600181811c908216806200022357607f821691505b6020821081036200024457634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200029857600081815260208120601f850160051c81016020861015620002735750805b601f850160051c820191505b8181101562000294578281556001016200027f565b5050505b505050565b81516001600160401b03811115620002b957620002b9620000af565b620002d181620002ca84546200020e565b846200024a565b602080601f831160018114620003095760008415620002f05750858301515b600019600386901b1c1916600185901b17855562000294565b600085815260208120601f198616915b828110156200033a5788860151825594840194600190910190840162000319565b5085821015620003595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6107dd80620003796000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806354fd4d501161007157806354fd4d50146101595780635c47d007146101605780635f9970e6146101735780637284e416146101865780639a6fc8f51461018e578063feaf968c146101a157600080fd5b806306fdde03146100ae578063313ce567146100cc57806335e8568f146100db5780633c528def146100f25780634a6434991461012e575b600080fd5b6100b66101a9565b6040516100c39190610587565b60405180910390f35b604051601281526020016100c3565b6100e460025481565b6040519081526020016100c3565b6100fa610237565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100c3565b600154610141906001600160a01b031681565b6040516001600160a01b0390911681526020016100c3565b60016100e4565b6100fa61016e3660046105ed565b6102d5565b600054610141906001600160a01b031681565b6100b6610441565b6100fa61019c3660046105ed565b61044e565b6100fa6104b1565b600380546101b690610611565b80601f01602080910402602001604051908101604052809291908181526020018280546101e290610611565b801561022f5780601f106102045761010080835404028352916020019161022f565b820191906000526020600020905b81548152906001019060200180831161021257829003601f168201915b505050505081565b6000805460025460405163e90f1a4360e01b81526004810191909152829182918291829182916001600160a01b03169063e90f1a439060240161010060405180830381865afa15801561028e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b291906106d5565b606001518051602082015160409092015197989097919650909450879350915050565b6000805460025460405163e90f1a4360e01b81526004810191909152829182918291829182916001600160a01b03169063e90f1a439060240161010060405180830381865afa15801561032c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035091906106d5565b905061037660405180606001604052806000815260200160008152602001600081525090565b81604001516001600160501b0316886001600160501b03160361039e57506060810151610421565b600054600254604051635823156d60e01b815260048101919091526001600160501b038a1660248201526001600160a01b0390911690635823156d90604401606060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e919061078b565b90505b805160208201516040909201519899909891975090955088945092505050565b600480546101b690610611565b600080600080600061045f866102d5565b93985091965094509250905060008290036104a8576002546040516304e51fed60e21b815260048101919091526001600160501b03861660248201526044015b60405180910390fd5b91939590929450565b6000805460025460405163e90f1a4360e01b815283928392839283926001600160a01b03169163e90f1a43916104ee919060040190815260200190565b61010060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053091906106d5565b604001519450846001600160501b031660000361056e576002546040516304e51fed60e21b815260048101919091526000602482015260440161049f565b610576610237565b945094509450945094509091929394565b600060208083528351808285015260005b818110156105b457858101830151858201604001528201610598565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160501b03811681146105ea57600080fd5b50565b6000602082840312156105ff57600080fd5b813561060a816105d5565b9392505050565b600181811c9082168061062557607f821691505b60208210810361064557634e487b7160e01b600052602260045260246000fd5b50919050565b8051610656816105d5565b919050565b60006060828403121561066d57600080fd5b6040516060810181811067ffffffffffffffff8211171561069e57634e487b7160e01b600052604160045260246000fd5b80604052508091508251815260208301516020820152604083015160408201525092915050565b8051801515811461065657600080fd5b600061010082840312156106e857600080fd5b60405160c0810181811067ffffffffffffffff8211171561071957634e487b7160e01b600052604160045260246000fd5b60405282516001600160a01b038116811461073357600080fd5b81526020838101519082015261074b6040840161064b565b604082015261075d846060850161065b565b606082015261076e60c084016106c5565b608082015261077f60e084016106c5565b60a08201529392505050565b60006060828403121561079d57600080fd5b61060a838361065b56fea2646970667358221220734a786ed59bea2b19fe77e0a3b97620e87cce633c772e7b1a50d5fbd503c5de64736f6c63430008110033";

type AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Aggregator__factory extends ContractFactory {
  constructor(...args: AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _switchboard: PromiseOrValue<string>,
    _feedId: PromiseOrValue<string>,
    _feedName: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Aggregator> {
    return super.deploy(
      _switchboard,
      _feedId,
      _feedName,
      _name,
      _description,
      overrides || {}
    ) as Promise<Aggregator>;
  }
  override getDeployTransaction(
    _switchboard: PromiseOrValue<string>,
    _feedId: PromiseOrValue<string>,
    _feedName: PromiseOrValue<BytesLike>,
    _name: PromiseOrValue<string>,
    _description: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _switchboard,
      _feedId,
      _feedName,
      _name,
      _description,
      overrides || {}
    );
  }
  override attach(address: string): Aggregator {
    return super.attach(address) as Aggregator;
  }
  override connect(signer: Signer): Aggregator__factory {
    return super.connect(signer) as Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorInterface {
    return new utils.Interface(_abi) as AggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Aggregator {
    return new Contract(address, _abi, signerOrProvider) as Aggregator;
  }
}
